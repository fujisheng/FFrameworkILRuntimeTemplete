// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from rpc.proto</summary>
public static partial class RpcReflection {

  #region Descriptor
  /// <summary>File descriptor for rpc.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RpcReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglycGMucHJvdG8idQoMUnBjTWVzc2FnZUlEImUKAklEEggKBFBpbmcQARIV",
          "ChFSZWdpc3RlclNlcnZlclJlcRACEhUKEVJlZ2lzdGVyU2VydmVyUmVzEAMS",
          "EgoORm9yd2FyZE1lc3NhZ2UQBBITCg9HYXRlT25saW5lQ291bnQQBSIlChFS",
          "ZWdpc3RlclNlcnZlclJlcRIQCghzZXJ2ZXJJZBgBIAIoByIzChFSZWdpc3Rl",
          "clNlcnZlclJlcxIQCghzZXJ2ZXJJZBgBIAIoBxIMCgRjb2RlGAIgAigFImEK",
          "DkZvcndhcmRNZXNzYWdlEhAKCHNlcnZlcklkGAEgAigHEhAKCGNsaWVudElk",
          "GAIgAigGEg4KBnVzZXJJZBgDIAIoBhIPCgdjb250ZW50GAQgAigMEgoKAmlw",
          "GAUgASgHIksKD0dhdGVPbmxpbmVDb3VudBIOCgZnYXRlSWQYASACKAUSEwoL",
          "Y2xpZW50Q291bnQYAiACKAUSEwoLb25saW5lQ291bnQYAyACKAU="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcMessageID), global::RpcMessageID.Parser, null, null, new[]{ typeof(global::RpcMessageID.Types.ID) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterServerReq), global::RegisterServerReq.Parser, new[]{ "ServerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterServerRes), global::RegisterServerRes.Parser, new[]{ "ServerId", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ForwardMessage), global::ForwardMessage.Parser, new[]{ "ServerId", "ClientId", "UserId", "Content", "Ip" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GateOnlineCount), global::GateOnlineCount.Parser, new[]{ "GateId", "ClientCount", "OnlineCount" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///message id range: 1-4999
/// </summary>
public sealed partial class RpcMessageID : pb::IMessage<RpcMessageID>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcMessageID> _parser = new pb::MessageParser<RpcMessageID>(() => new RpcMessageID());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcMessageID> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RpcReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcMessageID() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcMessageID(RpcMessageID other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcMessageID Clone() {
    return new RpcMessageID(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcMessageID);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcMessageID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcMessageID other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the RpcMessageID message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ID {
      [pbr::OriginalName("Ping")] Ping = 1,
      [pbr::OriginalName("RegisterServerReq")] RegisterServerReq = 2,
      [pbr::OriginalName("RegisterServerRes")] RegisterServerRes = 3,
      [pbr::OriginalName("ForwardMessage")] ForwardMessage = 4,
      [pbr::OriginalName("GateOnlineCount")] GateOnlineCount = 5,
    }

  }
  #endregion

}

/// <summary>
///注册服务器请求
/// </summary>
public sealed partial class RegisterServerReq : pb::IMessage<RegisterServerReq>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RegisterServerReq> _parser = new pb::MessageParser<RegisterServerReq>(() => new RegisterServerReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterServerReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RpcReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerReq(RegisterServerReq other) : this() {
    _hasBits0 = other._hasBits0;
    serverId_ = other.serverId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerReq Clone() {
    return new RegisterServerReq(this);
  }

  /// <summary>Field number for the "serverId" field.</summary>
  public const int ServerIdFieldNumber = 1;
  private readonly static uint ServerIdDefaultValue = 0;

  private uint serverId_;
  /// <summary>
  ///高2位是发起请求的服务器ID, 低2位连接的服务器ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerId {
    get { if ((_hasBits0 & 1) != 0) { return serverId_; } else { return ServerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serverId_ = value;
    }
  }
  /// <summary>Gets whether the "serverId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serverId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterServerReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterServerReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerId != other.ServerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasServerId) hash ^= ServerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasServerId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ServerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasServerId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ServerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasServerId) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterServerReq other) {
    if (other == null) {
      return;
    }
    if (other.HasServerId) {
      ServerId = other.ServerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ServerId = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ServerId = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///注册服务器返回
/// </summary>
public sealed partial class RegisterServerRes : pb::IMessage<RegisterServerRes>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RegisterServerRes> _parser = new pb::MessageParser<RegisterServerRes>(() => new RegisterServerRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterServerRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RpcReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerRes(RegisterServerRes other) : this() {
    _hasBits0 = other._hasBits0;
    serverId_ = other.serverId_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerRes Clone() {
    return new RegisterServerRes(this);
  }

  /// <summary>Field number for the "serverId" field.</summary>
  public const int ServerIdFieldNumber = 1;
  private readonly static uint ServerIdDefaultValue = 0;

  private uint serverId_;
  /// <summary>
  ///高2位是发起请求的服务器ID, 低2位连接的服务器ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerId {
    get { if ((_hasBits0 & 1) != 0) { return serverId_; } else { return ServerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serverId_ = value;
    }
  }
  /// <summary>Gets whether the "serverId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serverId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 0 注册失败, 1 注册成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterServerRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterServerRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerId != other.ServerId) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasServerId) hash ^= ServerId.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasServerId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ServerId);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasServerId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ServerId);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasServerId) {
      size += 1 + 4;
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterServerRes other) {
    if (other == null) {
      return;
    }
    if (other.HasServerId) {
      ServerId = other.ServerId;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ServerId = input.ReadFixed32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ServerId = input.ReadFixed32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///转发消息
/// </summary>
public sealed partial class ForwardMessage : pb::IMessage<ForwardMessage>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ForwardMessage> _parser = new pb::MessageParser<ForwardMessage>(() => new ForwardMessage());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ForwardMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RpcReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForwardMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForwardMessage(ForwardMessage other) : this() {
    _hasBits0 = other._hasBits0;
    serverId_ = other.serverId_;
    clientId_ = other.clientId_;
    userId_ = other.userId_;
    content_ = other.content_;
    ip_ = other.ip_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForwardMessage Clone() {
    return new ForwardMessage(this);
  }

  /// <summary>Field number for the "serverId" field.</summary>
  public const int ServerIdFieldNumber = 1;
  private readonly static uint ServerIdDefaultValue = 0;

  private uint serverId_;
  /// <summary>
  ///高2位是发起请求的服务器fromId, 低2位目的服务器toId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerId {
    get { if ((_hasBits0 & 1) != 0) { return serverId_; } else { return ServerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serverId_ = value;
    }
  }
  /// <summary>Gets whether the "serverId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serverId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clientId" field.</summary>
  public const int ClientIdFieldNumber = 2;
  private readonly static ulong ClientIdDefaultValue = 0UL;

  private ulong clientId_;
  /// <summary>
  ///发送给客户端ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ClientId {
    get { if ((_hasBits0 & 2) != 0) { return clientId_; } else { return ClientIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientId_ = value;
    }
  }
  /// <summary>Gets whether the "clientId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "clientId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 3;
  private readonly static ulong UserIdDefaultValue = 0UL;

  private ulong userId_;
  /// <summary>
  ///发送给用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UserId {
    get { if ((_hasBits0 & 4) != 0) { return userId_; } else { return UserIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      userId_ = value;
    }
  }
  /// <summary>Gets whether the "userId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "userId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 4;
  private readonly static pb::ByteString ContentDefaultValue = pb::ByteString.Empty;

  private pb::ByteString content_;
  /// <summary>
  ///重定向字节流
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_ ?? ContentDefaultValue; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "content" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContent {
    get { return content_ != null; }
  }
  /// <summary>Clears the value of the "content" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContent() {
    content_ = null;
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 5;
  private readonly static uint IpDefaultValue = 0;

  private uint ip_;
  /// <summary>
  ///客户端ip
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Ip {
    get { if ((_hasBits0 & 8) != 0) { return ip_; } else { return IpDefaultValue; } }
    set {
      _hasBits0 |= 8;
      ip_ = value;
    }
  }
  /// <summary>Gets whether the "ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIp() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ForwardMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ForwardMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerId != other.ServerId) return false;
    if (ClientId != other.ClientId) return false;
    if (UserId != other.UserId) return false;
    if (Content != other.Content) return false;
    if (Ip != other.Ip) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasServerId) hash ^= ServerId.GetHashCode();
    if (HasClientId) hash ^= ClientId.GetHashCode();
    if (HasUserId) hash ^= UserId.GetHashCode();
    if (HasContent) hash ^= Content.GetHashCode();
    if (HasIp) hash ^= Ip.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasServerId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ServerId);
    }
    if (HasClientId) {
      output.WriteRawTag(17);
      output.WriteFixed64(ClientId);
    }
    if (HasUserId) {
      output.WriteRawTag(25);
      output.WriteFixed64(UserId);
    }
    if (HasContent) {
      output.WriteRawTag(34);
      output.WriteBytes(Content);
    }
    if (HasIp) {
      output.WriteRawTag(45);
      output.WriteFixed32(Ip);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasServerId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ServerId);
    }
    if (HasClientId) {
      output.WriteRawTag(17);
      output.WriteFixed64(ClientId);
    }
    if (HasUserId) {
      output.WriteRawTag(25);
      output.WriteFixed64(UserId);
    }
    if (HasContent) {
      output.WriteRawTag(34);
      output.WriteBytes(Content);
    }
    if (HasIp) {
      output.WriteRawTag(45);
      output.WriteFixed32(Ip);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasServerId) {
      size += 1 + 4;
    }
    if (HasClientId) {
      size += 1 + 8;
    }
    if (HasUserId) {
      size += 1 + 8;
    }
    if (HasContent) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    if (HasIp) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ForwardMessage other) {
    if (other == null) {
      return;
    }
    if (other.HasServerId) {
      ServerId = other.ServerId;
    }
    if (other.HasClientId) {
      ClientId = other.ClientId;
    }
    if (other.HasUserId) {
      UserId = other.UserId;
    }
    if (other.HasContent) {
      Content = other.Content;
    }
    if (other.HasIp) {
      Ip = other.Ip;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ServerId = input.ReadFixed32();
          break;
        }
        case 17: {
          ClientId = input.ReadFixed64();
          break;
        }
        case 25: {
          UserId = input.ReadFixed64();
          break;
        }
        case 34: {
          Content = input.ReadBytes();
          break;
        }
        case 45: {
          Ip = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ServerId = input.ReadFixed32();
          break;
        }
        case 17: {
          ClientId = input.ReadFixed64();
          break;
        }
        case 25: {
          UserId = input.ReadFixed64();
          break;
        }
        case 34: {
          Content = input.ReadBytes();
          break;
        }
        case 45: {
          Ip = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///网关在线人数
/// </summary>
public sealed partial class GateOnlineCount : pb::IMessage<GateOnlineCount>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GateOnlineCount> _parser = new pb::MessageParser<GateOnlineCount>(() => new GateOnlineCount());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GateOnlineCount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RpcReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GateOnlineCount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GateOnlineCount(GateOnlineCount other) : this() {
    _hasBits0 = other._hasBits0;
    gateId_ = other.gateId_;
    clientCount_ = other.clientCount_;
    onlineCount_ = other.onlineCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GateOnlineCount Clone() {
    return new GateOnlineCount(this);
  }

  /// <summary>Field number for the "gateId" field.</summary>
  public const int GateIdFieldNumber = 1;
  private readonly static int GateIdDefaultValue = 0;

  private int gateId_;
  /// <summary>
  ///gateId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GateId {
    get { if ((_hasBits0 & 1) != 0) { return gateId_; } else { return GateIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gateId_ = value;
    }
  }
  /// <summary>Gets whether the "gateId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGateId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gateId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGateId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clientCount" field.</summary>
  public const int ClientCountFieldNumber = 2;
  private readonly static int ClientCountDefaultValue = 0;

  private int clientCount_;
  /// <summary>
  ///客户端数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientCount {
    get { if ((_hasBits0 & 2) != 0) { return clientCount_; } else { return ClientCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientCount_ = value;
    }
  }
  /// <summary>Gets whether the "clientCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "clientCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "onlineCount" field.</summary>
  public const int OnlineCountFieldNumber = 3;
  private readonly static int OnlineCountDefaultValue = 0;

  private int onlineCount_;
  /// <summary>
  ///已在线数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnlineCount {
    get { if ((_hasBits0 & 4) != 0) { return onlineCount_; } else { return OnlineCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      onlineCount_ = value;
    }
  }
  /// <summary>Gets whether the "onlineCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOnlineCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "onlineCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOnlineCount() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GateOnlineCount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GateOnlineCount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GateId != other.GateId) return false;
    if (ClientCount != other.ClientCount) return false;
    if (OnlineCount != other.OnlineCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGateId) hash ^= GateId.GetHashCode();
    if (HasClientCount) hash ^= ClientCount.GetHashCode();
    if (HasOnlineCount) hash ^= OnlineCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGateId) {
      output.WriteRawTag(8);
      output.WriteInt32(GateId);
    }
    if (HasClientCount) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientCount);
    }
    if (HasOnlineCount) {
      output.WriteRawTag(24);
      output.WriteInt32(OnlineCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGateId) {
      output.WriteRawTag(8);
      output.WriteInt32(GateId);
    }
    if (HasClientCount) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientCount);
    }
    if (HasOnlineCount) {
      output.WriteRawTag(24);
      output.WriteInt32(OnlineCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGateId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateId);
    }
    if (HasClientCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientCount);
    }
    if (HasOnlineCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GateOnlineCount other) {
    if (other == null) {
      return;
    }
    if (other.HasGateId) {
      GateId = other.GateId;
    }
    if (other.HasClientCount) {
      ClientCount = other.ClientCount;
    }
    if (other.HasOnlineCount) {
      OnlineCount = other.OnlineCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GateId = input.ReadInt32();
          break;
        }
        case 16: {
          ClientCount = input.ReadInt32();
          break;
        }
        case 24: {
          OnlineCount = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          GateId = input.ReadInt32();
          break;
        }
        case 16: {
          ClientCount = input.ReadInt32();
          break;
        }
        case 24: {
          OnlineCount = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
