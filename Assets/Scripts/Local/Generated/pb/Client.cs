// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from client.proto</summary>
public static partial class ClientReflection {

  #region Descriptor
  /// <summary>File descriptor for client.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ClientReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxjbGllbnQucHJvdG8aC21hY3JvLnByb3RvGgxjb21tb24ucHJvdG8ihwIK",
          "EUxvZ2luQnlTZXNzaW9uQzJTEgoKAmlkGAEgASgDEhAKCHBsYXRmb3JtGAIg",
          "ASgJEg8KB3Nlc3Npb24YAyABKAkSEQoJcmVjb25uZWN0GAQgASgIEhMKC2Rl",
          "dmljZU1vZGVsGAcgASgJEhcKD29wZXJhdGluZ1N5c3RlbRgIIAEoCRIWCg5w",
          "cm9jZXNzb3JDb3VudBgJIAEoBRIeChZkZXZpY2VVbmlxdWVJZGVudGlmaWVy",
          "GAogASgJEhgKEHN5c3RlbU1lbW9yeVNpemUYCyABKAUSEQoJc2ltdWxhdG9y",
          "GAwgASgIEgwKBHJvb3QYDSABKAgSDwoHdmVyc2lvbhgOIAEoCSJjChFMb2dp",
          "bkJ5U2Vzc2lvblMyQxIMCgRjb2RlGAEgASgFEhQKBG1haW4YAiABKAsyBi5H",
          "YW1lchINCgVzdGFydBgEIAEoBRILCgNlbmQYBSABKAUSDgoGcmVhc29uGAYg",
          "ASgJIh8KDU5vdGlmeUtpY2tTMkMSDgoGcmVhc29uGAEgASgF"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::MacroReflection.Descriptor, global::CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginBySessionC2S), global::LoginBySessionC2S.Parser, new[]{ "Id", "Platform", "Session", "Reconnect", "DeviceModel", "OperatingSystem", "ProcessorCount", "DeviceUniqueIdentifier", "SystemMemorySize", "Simulator", "Root", "Version" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginBySessionS2C), global::LoginBySessionS2C.Parser, new[]{ "Code", "Main", "Start", "End", "Reason" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotifyKickS2C), global::NotifyKickS2C.Parser, new[]{ "Reason" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///玩家登陆
/// </summary>
public sealed partial class LoginBySessionC2S : pb::IMessage<LoginBySessionC2S>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LoginBySessionC2S> _parser = new pb::MessageParser<LoginBySessionC2S>(() => new LoginBySessionC2S());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginBySessionC2S> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginBySessionC2S() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginBySessionC2S(LoginBySessionC2S other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    platform_ = other.platform_;
    session_ = other.session_;
    reconnect_ = other.reconnect_;
    deviceModel_ = other.deviceModel_;
    operatingSystem_ = other.operatingSystem_;
    processorCount_ = other.processorCount_;
    deviceUniqueIdentifier_ = other.deviceUniqueIdentifier_;
    systemMemorySize_ = other.systemMemorySize_;
    simulator_ = other.simulator_;
    root_ = other.root_;
    version_ = other.version_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginBySessionC2S Clone() {
    return new LoginBySessionC2S(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 2;
  private readonly static string PlatformDefaultValue = "";

  private string platform_;
  /// <summary>
  ///包类型: pc/ios/android
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Platform {
    get { return platform_ ?? PlatformDefaultValue; }
    set {
      platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "platform" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatform {
    get { return platform_ != null; }
  }
  /// <summary>Clears the value of the "platform" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatform() {
    platform_ = null;
  }

  /// <summary>Field number for the "session" field.</summary>
  public const int SessionFieldNumber = 3;
  private readonly static string SessionDefaultValue = "";

  private string session_;
  /// <summary>
  ///登录session
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Session {
    get { return session_ ?? SessionDefaultValue; }
    set {
      session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "session" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSession {
    get { return session_ != null; }
  }
  /// <summary>Clears the value of the "session" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSession() {
    session_ = null;
  }

  /// <summary>Field number for the "reconnect" field.</summary>
  public const int ReconnectFieldNumber = 4;
  private readonly static bool ReconnectDefaultValue = false;

  private bool reconnect_;
  /// <summary>
  ///是否重连
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Reconnect {
    get { if ((_hasBits0 & 2) != 0) { return reconnect_; } else { return ReconnectDefaultValue; } }
    set {
      _hasBits0 |= 2;
      reconnect_ = value;
    }
  }
  /// <summary>Gets whether the "reconnect" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReconnect {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "reconnect" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReconnect() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "deviceModel" field.</summary>
  public const int DeviceModelFieldNumber = 7;
  private readonly static string DeviceModelDefaultValue = "";

  private string deviceModel_;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceModel {
    get { return deviceModel_ ?? DeviceModelDefaultValue; }
    set {
      deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "deviceModel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceModel {
    get { return deviceModel_ != null; }
  }
  /// <summary>Clears the value of the "deviceModel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceModel() {
    deviceModel_ = null;
  }

  /// <summary>Field number for the "operatingSystem" field.</summary>
  public const int OperatingSystemFieldNumber = 8;
  private readonly static string OperatingSystemDefaultValue = "";

  private string operatingSystem_;
  /// <summary>
  ///系统
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OperatingSystem {
    get { return operatingSystem_ ?? OperatingSystemDefaultValue; }
    set {
      operatingSystem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "operatingSystem" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOperatingSystem {
    get { return operatingSystem_ != null; }
  }
  /// <summary>Clears the value of the "operatingSystem" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOperatingSystem() {
    operatingSystem_ = null;
  }

  /// <summary>Field number for the "processorCount" field.</summary>
  public const int ProcessorCountFieldNumber = 9;
  private readonly static int ProcessorCountDefaultValue = 0;

  private int processorCount_;
  /// <summary>
  ///cpu个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessorCount {
    get { if ((_hasBits0 & 4) != 0) { return processorCount_; } else { return ProcessorCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      processorCount_ = value;
    }
  }
  /// <summary>Gets whether the "processorCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessorCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "processorCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessorCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "deviceUniqueIdentifier" field.</summary>
  public const int DeviceUniqueIdentifierFieldNumber = 10;
  private readonly static string DeviceUniqueIdentifierDefaultValue = "";

  private string deviceUniqueIdentifier_;
  /// <summary>
  ///设备串
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceUniqueIdentifier {
    get { return deviceUniqueIdentifier_ ?? DeviceUniqueIdentifierDefaultValue; }
    set {
      deviceUniqueIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "deviceUniqueIdentifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceUniqueIdentifier {
    get { return deviceUniqueIdentifier_ != null; }
  }
  /// <summary>Clears the value of the "deviceUniqueIdentifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceUniqueIdentifier() {
    deviceUniqueIdentifier_ = null;
  }

  /// <summary>Field number for the "systemMemorySize" field.</summary>
  public const int SystemMemorySizeFieldNumber = 11;
  private readonly static int SystemMemorySizeDefaultValue = 0;

  private int systemMemorySize_;
  /// <summary>
  ///内存
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SystemMemorySize {
    get { if ((_hasBits0 & 8) != 0) { return systemMemorySize_; } else { return SystemMemorySizeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      systemMemorySize_ = value;
    }
  }
  /// <summary>Gets whether the "systemMemorySize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSystemMemorySize {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "systemMemorySize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSystemMemorySize() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "simulator" field.</summary>
  public const int SimulatorFieldNumber = 12;
  private readonly static bool SimulatorDefaultValue = false;

  private bool simulator_;
  /// <summary>
  ///是否是模拟器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Simulator {
    get { if ((_hasBits0 & 16) != 0) { return simulator_; } else { return SimulatorDefaultValue; } }
    set {
      _hasBits0 |= 16;
      simulator_ = value;
    }
  }
  /// <summary>Gets whether the "simulator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSimulator {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "simulator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSimulator() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "root" field.</summary>
  public const int RootFieldNumber = 13;
  private readonly static bool RootDefaultValue = false;

  private bool root_;
  /// <summary>
  ///是否root
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Root {
    get { if ((_hasBits0 & 32) != 0) { return root_; } else { return RootDefaultValue; } }
    set {
      _hasBits0 |= 32;
      root_ = value;
    }
  }
  /// <summary>Gets whether the "root" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRoot {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "root" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRoot() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 14;
  private readonly static string VersionDefaultValue = "";

  private string version_;
  /// <summary>
  ///客户端版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVersion() {
    version_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginBySessionC2S);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginBySessionC2S other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Platform != other.Platform) return false;
    if (Session != other.Session) return false;
    if (Reconnect != other.Reconnect) return false;
    if (DeviceModel != other.DeviceModel) return false;
    if (OperatingSystem != other.OperatingSystem) return false;
    if (ProcessorCount != other.ProcessorCount) return false;
    if (DeviceUniqueIdentifier != other.DeviceUniqueIdentifier) return false;
    if (SystemMemorySize != other.SystemMemorySize) return false;
    if (Simulator != other.Simulator) return false;
    if (Root != other.Root) return false;
    if (Version != other.Version) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasPlatform) hash ^= Platform.GetHashCode();
    if (HasSession) hash ^= Session.GetHashCode();
    if (HasReconnect) hash ^= Reconnect.GetHashCode();
    if (HasDeviceModel) hash ^= DeviceModel.GetHashCode();
    if (HasOperatingSystem) hash ^= OperatingSystem.GetHashCode();
    if (HasProcessorCount) hash ^= ProcessorCount.GetHashCode();
    if (HasDeviceUniqueIdentifier) hash ^= DeviceUniqueIdentifier.GetHashCode();
    if (HasSystemMemorySize) hash ^= SystemMemorySize.GetHashCode();
    if (HasSimulator) hash ^= Simulator.GetHashCode();
    if (HasRoot) hash ^= Root.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasPlatform) {
      output.WriteRawTag(18);
      output.WriteString(Platform);
    }
    if (HasSession) {
      output.WriteRawTag(26);
      output.WriteString(Session);
    }
    if (HasReconnect) {
      output.WriteRawTag(32);
      output.WriteBool(Reconnect);
    }
    if (HasDeviceModel) {
      output.WriteRawTag(58);
      output.WriteString(DeviceModel);
    }
    if (HasOperatingSystem) {
      output.WriteRawTag(66);
      output.WriteString(OperatingSystem);
    }
    if (HasProcessorCount) {
      output.WriteRawTag(72);
      output.WriteInt32(ProcessorCount);
    }
    if (HasDeviceUniqueIdentifier) {
      output.WriteRawTag(82);
      output.WriteString(DeviceUniqueIdentifier);
    }
    if (HasSystemMemorySize) {
      output.WriteRawTag(88);
      output.WriteInt32(SystemMemorySize);
    }
    if (HasSimulator) {
      output.WriteRawTag(96);
      output.WriteBool(Simulator);
    }
    if (HasRoot) {
      output.WriteRawTag(104);
      output.WriteBool(Root);
    }
    if (HasVersion) {
      output.WriteRawTag(114);
      output.WriteString(Version);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasPlatform) {
      output.WriteRawTag(18);
      output.WriteString(Platform);
    }
    if (HasSession) {
      output.WriteRawTag(26);
      output.WriteString(Session);
    }
    if (HasReconnect) {
      output.WriteRawTag(32);
      output.WriteBool(Reconnect);
    }
    if (HasDeviceModel) {
      output.WriteRawTag(58);
      output.WriteString(DeviceModel);
    }
    if (HasOperatingSystem) {
      output.WriteRawTag(66);
      output.WriteString(OperatingSystem);
    }
    if (HasProcessorCount) {
      output.WriteRawTag(72);
      output.WriteInt32(ProcessorCount);
    }
    if (HasDeviceUniqueIdentifier) {
      output.WriteRawTag(82);
      output.WriteString(DeviceUniqueIdentifier);
    }
    if (HasSystemMemorySize) {
      output.WriteRawTag(88);
      output.WriteInt32(SystemMemorySize);
    }
    if (HasSimulator) {
      output.WriteRawTag(96);
      output.WriteBool(Simulator);
    }
    if (HasRoot) {
      output.WriteRawTag(104);
      output.WriteBool(Root);
    }
    if (HasVersion) {
      output.WriteRawTag(114);
      output.WriteString(Version);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasPlatform) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
    }
    if (HasSession) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
    }
    if (HasReconnect) {
      size += 1 + 1;
    }
    if (HasDeviceModel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
    }
    if (HasOperatingSystem) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OperatingSystem);
    }
    if (HasProcessorCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessorCount);
    }
    if (HasDeviceUniqueIdentifier) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceUniqueIdentifier);
    }
    if (HasSystemMemorySize) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemMemorySize);
    }
    if (HasSimulator) {
      size += 1 + 1;
    }
    if (HasRoot) {
      size += 1 + 1;
    }
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginBySessionC2S other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasPlatform) {
      Platform = other.Platform;
    }
    if (other.HasSession) {
      Session = other.Session;
    }
    if (other.HasReconnect) {
      Reconnect = other.Reconnect;
    }
    if (other.HasDeviceModel) {
      DeviceModel = other.DeviceModel;
    }
    if (other.HasOperatingSystem) {
      OperatingSystem = other.OperatingSystem;
    }
    if (other.HasProcessorCount) {
      ProcessorCount = other.ProcessorCount;
    }
    if (other.HasDeviceUniqueIdentifier) {
      DeviceUniqueIdentifier = other.DeviceUniqueIdentifier;
    }
    if (other.HasSystemMemorySize) {
      SystemMemorySize = other.SystemMemorySize;
    }
    if (other.HasSimulator) {
      Simulator = other.Simulator;
    }
    if (other.HasRoot) {
      Root = other.Root;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Platform = input.ReadString();
          break;
        }
        case 26: {
          Session = input.ReadString();
          break;
        }
        case 32: {
          Reconnect = input.ReadBool();
          break;
        }
        case 58: {
          DeviceModel = input.ReadString();
          break;
        }
        case 66: {
          OperatingSystem = input.ReadString();
          break;
        }
        case 72: {
          ProcessorCount = input.ReadInt32();
          break;
        }
        case 82: {
          DeviceUniqueIdentifier = input.ReadString();
          break;
        }
        case 88: {
          SystemMemorySize = input.ReadInt32();
          break;
        }
        case 96: {
          Simulator = input.ReadBool();
          break;
        }
        case 104: {
          Root = input.ReadBool();
          break;
        }
        case 114: {
          Version = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Platform = input.ReadString();
          break;
        }
        case 26: {
          Session = input.ReadString();
          break;
        }
        case 32: {
          Reconnect = input.ReadBool();
          break;
        }
        case 58: {
          DeviceModel = input.ReadString();
          break;
        }
        case 66: {
          OperatingSystem = input.ReadString();
          break;
        }
        case 72: {
          ProcessorCount = input.ReadInt32();
          break;
        }
        case 82: {
          DeviceUniqueIdentifier = input.ReadString();
          break;
        }
        case 88: {
          SystemMemorySize = input.ReadInt32();
          break;
        }
        case 96: {
          Simulator = input.ReadBool();
          break;
        }
        case 104: {
          Root = input.ReadBool();
          break;
        }
        case 114: {
          Version = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///玩家登陆
/// </summary>
public sealed partial class LoginBySessionS2C : pb::IMessage<LoginBySessionS2C>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LoginBySessionS2C> _parser = new pb::MessageParser<LoginBySessionS2C>(() => new LoginBySessionS2C());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginBySessionS2C> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginBySessionS2C() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginBySessionS2C(LoginBySessionS2C other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    main_ = other.main_ != null ? other.main_.Clone() : null;
    start_ = other.start_;
    end_ = other.end_;
    reason_ = other.reason_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginBySessionS2C Clone() {
    return new LoginBySessionS2C(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  ///0成功, 1失败, 2禁号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "main" field.</summary>
  public const int MainFieldNumber = 2;
  private global::Gamer main_;
  /// <summary>
  ///玩家主信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Gamer Main {
    get { return main_; }
    set {
      main_ = value;
    }
  }

  /// <summary>Field number for the "start" field.</summary>
  public const int StartFieldNumber = 4;
  private readonly static int StartDefaultValue = 0;

  private int start_;
  /// <summary>
  ///开始禁号时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Start {
    get { if ((_hasBits0 & 2) != 0) { return start_; } else { return StartDefaultValue; } }
    set {
      _hasBits0 |= 2;
      start_ = value;
    }
  }
  /// <summary>Gets whether the "start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStart {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStart() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "end" field.</summary>
  public const int EndFieldNumber = 5;
  private readonly static int EndDefaultValue = 0;

  private int end_;
  /// <summary>
  ///结束禁号时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int End {
    get { if ((_hasBits0 & 4) != 0) { return end_; } else { return EndDefaultValue; } }
    set {
      _hasBits0 |= 4;
      end_ = value;
    }
  }
  /// <summary>Gets whether the "end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnd {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnd() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 6;
  private readonly static string ReasonDefaultValue = "";

  private string reason_;
  /// <summary>
  ///禁止登录说明
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Reason {
    get { return reason_ ?? ReasonDefaultValue; }
    set {
      reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReason {
    get { return reason_ != null; }
  }
  /// <summary>Clears the value of the "reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReason() {
    reason_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginBySessionS2C);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginBySessionS2C other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (!object.Equals(Main, other.Main)) return false;
    if (Start != other.Start) return false;
    if (End != other.End) return false;
    if (Reason != other.Reason) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (main_ != null) hash ^= Main.GetHashCode();
    if (HasStart) hash ^= Start.GetHashCode();
    if (HasEnd) hash ^= End.GetHashCode();
    if (HasReason) hash ^= Reason.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (main_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Main);
    }
    if (HasStart) {
      output.WriteRawTag(32);
      output.WriteInt32(Start);
    }
    if (HasEnd) {
      output.WriteRawTag(40);
      output.WriteInt32(End);
    }
    if (HasReason) {
      output.WriteRawTag(50);
      output.WriteString(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (main_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Main);
    }
    if (HasStart) {
      output.WriteRawTag(32);
      output.WriteInt32(Start);
    }
    if (HasEnd) {
      output.WriteRawTag(40);
      output.WriteInt32(End);
    }
    if (HasReason) {
      output.WriteRawTag(50);
      output.WriteString(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (main_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Main);
    }
    if (HasStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
    }
    if (HasEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
    }
    if (HasReason) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginBySessionS2C other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.main_ != null) {
      if (main_ == null) {
        Main = new global::Gamer();
      }
      Main.MergeFrom(other.Main);
    }
    if (other.HasStart) {
      Start = other.Start;
    }
    if (other.HasEnd) {
      End = other.End;
    }
    if (other.HasReason) {
      Reason = other.Reason;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          if (main_ == null) {
            Main = new global::Gamer();
          }
          input.ReadMessage(Main);
          break;
        }
        case 32: {
          Start = input.ReadInt32();
          break;
        }
        case 40: {
          End = input.ReadInt32();
          break;
        }
        case 50: {
          Reason = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          if (main_ == null) {
            Main = new global::Gamer();
          }
          input.ReadMessage(Main);
          break;
        }
        case 32: {
          Start = input.ReadInt32();
          break;
        }
        case 40: {
          End = input.ReadInt32();
          break;
        }
        case 50: {
          Reason = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///踢下线通知
/// </summary>
public sealed partial class NotifyKickS2C : pb::IMessage<NotifyKickS2C>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<NotifyKickS2C> _parser = new pb::MessageParser<NotifyKickS2C>(() => new NotifyKickS2C());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotifyKickS2C> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyKickS2C() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyKickS2C(NotifyKickS2C other) : this() {
    _hasBits0 = other._hasBits0;
    reason_ = other.reason_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyKickS2C Clone() {
    return new NotifyKickS2C(this);
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 1;
  private readonly static int ReasonDefaultValue = 0;

  private int reason_;
  /// <summary>
  ///原因 0:顶号 1:踢人通知 2:数据异常
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Reason {
    get { if ((_hasBits0 & 1) != 0) { return reason_; } else { return ReasonDefaultValue; } }
    set {
      _hasBits0 |= 1;
      reason_ = value;
    }
  }
  /// <summary>Gets whether the "reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReason {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReason() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotifyKickS2C);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotifyKickS2C other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reason != other.Reason) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasReason) hash ^= Reason.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasReason) {
      output.WriteRawTag(8);
      output.WriteInt32(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasReason) {
      output.WriteRawTag(8);
      output.WriteInt32(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasReason) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotifyKickS2C other) {
    if (other == null) {
      return;
    }
    if (other.HasReason) {
      Reason = other.Reason;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
