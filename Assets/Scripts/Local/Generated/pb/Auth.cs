// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: auth.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from auth.proto</summary>
public static partial class AuthReflection {

  #region Descriptor
  /// <summary>File descriptor for auth.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AuthReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgphdXRoLnByb3RvIjQKCFVzZXJJbmZvEgwKBG5hbWUYASABKAkSDgoGcGFz",
          "c3dkGAIgASgJEgoKAmlkGAMgASgJImgKDFVzZXJSb2xlSW5mbxIKCgJpZBgB",
          "IAEoAxIMCgRuYW1lGAIgASgJEg4KBnNlcnZlchgDIAEoBRINCgVjdGltZRgE",
          "IAEoAxIPCgdhY2NvdW50GAUgASgJEg4KBnR5cGVJZBgGIAEoBSKTAQoPTG9n",
          "aWNTZXJ2ZXJJbmZvEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDQoFc3Rh",
          "dGUYAyABKAUSDAoEbG9hZBgEIAEoBRILCgN0YWcYBSABKAUSDAoEdGltZRgG",
          "IAEoAxINCgV3aGl0ZRgHIAMoCRIQCghyZWdpc3RlchgIIAEoBRINCgVibGFj",
          "axgJIAMoCSI0ChVSZWNlbnRMb2dpblNlcnZlclVuaXQSCgoCaWQYASABKAUS",
          "DwoHdXNldGltZRgCIAEoAyI9ChVSZWNlbnRMb2dpblNlcnZlckluZm8SJAoE",
          "ZGF0YRgBIAMoCzIWLlJlY2VudExvZ2luU2VydmVyVW5pdA=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UserInfo), global::UserInfo.Parser, new[]{ "Name", "Passwd", "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserRoleInfo), global::UserRoleInfo.Parser, new[]{ "Id", "Name", "Server", "Ctime", "Account", "TypeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LogicServerInfo), global::LogicServerInfo.Parser, new[]{ "Id", "Name", "State", "Load", "Tag", "Time", "White", "Register", "Black" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RecentLoginServerUnit), global::RecentLoginServerUnit.Parser, new[]{ "Id", "Usetime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RecentLoginServerInfo), global::RecentLoginServerInfo.Parser, new[]{ "Data" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class UserInfo : pb::IMessage<UserInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AuthReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserInfo(UserInfo other) : this() {
    name_ = other.name_;
    passwd_ = other.passwd_;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserInfo Clone() {
    return new UserInfo(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  ///玩家名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "passwd" field.</summary>
  public const int PasswdFieldNumber = 2;
  private readonly static string PasswdDefaultValue = "";

  private string passwd_;
  /// <summary>
  ///玩家密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Passwd {
    get { return passwd_ ?? PasswdDefaultValue; }
    set {
      passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "passwd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPasswd {
    get { return passwd_ != null; }
  }
  /// <summary>Clears the value of the "passwd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPasswd() {
    passwd_ = null;
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 3;
  private readonly static string IdDefaultValue = "";

  private string id_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_ ?? IdDefaultValue; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return id_ != null; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    id_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Passwd != other.Passwd) return false;
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasName) hash ^= Name.GetHashCode();
    if (HasPasswd) hash ^= Passwd.GetHashCode();
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasPasswd) {
      output.WriteRawTag(18);
      output.WriteString(Passwd);
    }
    if (HasId) {
      output.WriteRawTag(26);
      output.WriteString(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasPasswd) {
      output.WriteRawTag(18);
      output.WriteString(Passwd);
    }
    if (HasId) {
      output.WriteRawTag(26);
      output.WriteString(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasPasswd) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
    }
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasPasswd) {
      Passwd = other.Passwd;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Passwd = input.ReadString();
          break;
        }
        case 26: {
          Id = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Passwd = input.ReadString();
          break;
        }
        case 26: {
          Id = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class UserRoleInfo : pb::IMessage<UserRoleInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UserRoleInfo> _parser = new pb::MessageParser<UserRoleInfo>(() => new UserRoleInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserRoleInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AuthReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRoleInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRoleInfo(UserRoleInfo other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    server_ = other.server_;
    ctime_ = other.ctime_;
    account_ = other.account_;
    typeId_ = other.typeId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRoleInfo Clone() {
    return new UserRoleInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  ///角色id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  ///角色昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "server" field.</summary>
  public const int ServerFieldNumber = 3;
  private readonly static int ServerDefaultValue = 0;

  private int server_;
  /// <summary>
  ///角色所在服务器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Server {
    get { if ((_hasBits0 & 2) != 0) { return server_; } else { return ServerDefaultValue; } }
    set {
      _hasBits0 |= 2;
      server_ = value;
    }
  }
  /// <summary>Gets whether the "server" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServer {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "server" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServer() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ctime" field.</summary>
  public const int CtimeFieldNumber = 4;
  private readonly static long CtimeDefaultValue = 0L;

  private long ctime_;
  /// <summary>
  ///角色创建时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Ctime {
    get { if ((_hasBits0 & 4) != 0) { return ctime_; } else { return CtimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      ctime_ = value;
    }
  }
  /// <summary>Gets whether the "ctime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ctime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 5;
  private readonly static string AccountDefaultValue = "";

  private string account_;
  /// <summary>
  ///玩家账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_ ?? AccountDefaultValue; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "account" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccount {
    get { return account_ != null; }
  }
  /// <summary>Clears the value of the "account" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccount() {
    account_ = null;
  }

  /// <summary>Field number for the "typeId" field.</summary>
  public const int TypeIdFieldNumber = 6;
  private readonly static int TypeIdDefaultValue = 0;

  private int typeId_;
  /// <summary>
  ///角色类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TypeId {
    get { if ((_hasBits0 & 8) != 0) { return typeId_; } else { return TypeIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      typeId_ = value;
    }
  }
  /// <summary>Gets whether the "typeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTypeId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "typeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTypeId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserRoleInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserRoleInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Server != other.Server) return false;
    if (Ctime != other.Ctime) return false;
    if (Account != other.Account) return false;
    if (TypeId != other.TypeId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasServer) hash ^= Server.GetHashCode();
    if (HasCtime) hash ^= Ctime.GetHashCode();
    if (HasAccount) hash ^= Account.GetHashCode();
    if (HasTypeId) hash ^= TypeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasServer) {
      output.WriteRawTag(24);
      output.WriteInt32(Server);
    }
    if (HasCtime) {
      output.WriteRawTag(32);
      output.WriteInt64(Ctime);
    }
    if (HasAccount) {
      output.WriteRawTag(42);
      output.WriteString(Account);
    }
    if (HasTypeId) {
      output.WriteRawTag(48);
      output.WriteInt32(TypeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasServer) {
      output.WriteRawTag(24);
      output.WriteInt32(Server);
    }
    if (HasCtime) {
      output.WriteRawTag(32);
      output.WriteInt64(Ctime);
    }
    if (HasAccount) {
      output.WriteRawTag(42);
      output.WriteString(Account);
    }
    if (HasTypeId) {
      output.WriteRawTag(48);
      output.WriteInt32(TypeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasServer) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Server);
    }
    if (HasCtime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ctime);
    }
    if (HasAccount) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (HasTypeId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserRoleInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasServer) {
      Server = other.Server;
    }
    if (other.HasCtime) {
      Ctime = other.Ctime;
    }
    if (other.HasAccount) {
      Account = other.Account;
    }
    if (other.HasTypeId) {
      TypeId = other.TypeId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Server = input.ReadInt32();
          break;
        }
        case 32: {
          Ctime = input.ReadInt64();
          break;
        }
        case 42: {
          Account = input.ReadString();
          break;
        }
        case 48: {
          TypeId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Server = input.ReadInt32();
          break;
        }
        case 32: {
          Ctime = input.ReadInt64();
          break;
        }
        case 42: {
          Account = input.ReadString();
          break;
        }
        case 48: {
          TypeId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LogicServerInfo : pb::IMessage<LogicServerInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LogicServerInfo> _parser = new pb::MessageParser<LogicServerInfo>(() => new LogicServerInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LogicServerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AuthReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicServerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicServerInfo(LogicServerInfo other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    state_ = other.state_;
    load_ = other.load_;
    tag_ = other.tag_;
    time_ = other.time_;
    white_ = other.white_.Clone();
    register_ = other.register_;
    black_ = other.black_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicServerInfo Clone() {
    return new LogicServerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  /// <summary>
  ///区服id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  ///区服名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private readonly static int StateDefaultValue = 0;

  private int state_;
  /// <summary>
  ///1关闭、2开放、3维护
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { if ((_hasBits0 & 2) != 0) { return state_; } else { return StateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      state_ = value;
    }
  }
  /// <summary>Gets whether the "state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasState {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearState() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "load" field.</summary>
  public const int LoadFieldNumber = 4;
  private readonly static int LoadDefaultValue = 0;

  private int load_;
  /// <summary>
  ///1流畅、2火爆
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Load {
    get { if ((_hasBits0 & 4) != 0) { return load_; } else { return LoadDefaultValue; } }
    set {
      _hasBits0 |= 4;
      load_ = value;
    }
  }
  /// <summary>Gets whether the "load" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLoad {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "load" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLoad() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "tag" field.</summary>
  public const int TagFieldNumber = 5;
  private readonly static int TagDefaultValue = 0;

  private int tag_;
  /// <summary>
  ///0无、1新区、2推荐
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tag {
    get { if ((_hasBits0 & 8) != 0) { return tag_; } else { return TagDefaultValue; } }
    set {
      _hasBits0 |= 8;
      tag_ = value;
    }
  }
  /// <summary>Gets whether the "tag" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTag {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "tag" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTag() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 6;
  private readonly static long TimeDefaultValue = 0L;

  private long time_;
  /// <summary>
  ///区服创建时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { if ((_hasBits0 & 16) != 0) { return time_; } else { return TimeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      time_ = value;
    }
  }
  /// <summary>Gets whether the "time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTime {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTime() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "white" field.</summary>
  public const int WhiteFieldNumber = 7;
  private static readonly pb::FieldCodec<string> _repeated_white_codec
      = pb::FieldCodec.ForString(58);
  private readonly pbc::RepeatedField<string> white_ = new pbc::RepeatedField<string>();
  /// <summary>
  ///白名单（维护状态下可进）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> White {
    get { return white_; }
  }

  /// <summary>Field number for the "register" field.</summary>
  public const int RegisterFieldNumber = 8;
  private readonly static int RegisterDefaultValue = 0;

  private int register_;
  /// <summary>
  ///0开放1关闭
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Register {
    get { if ((_hasBits0 & 32) != 0) { return register_; } else { return RegisterDefaultValue; } }
    set {
      _hasBits0 |= 32;
      register_ = value;
    }
  }
  /// <summary>Gets whether the "register" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRegister {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "register" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRegister() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "black" field.</summary>
  public const int BlackFieldNumber = 9;
  private static readonly pb::FieldCodec<string> _repeated_black_codec
      = pb::FieldCodec.ForString(74);
  private readonly pbc::RepeatedField<string> black_ = new pbc::RepeatedField<string>();
  /// <summary>
  ///黑名单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Black {
    get { return black_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LogicServerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LogicServerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (State != other.State) return false;
    if (Load != other.Load) return false;
    if (Tag != other.Tag) return false;
    if (Time != other.Time) return false;
    if(!white_.Equals(other.white_)) return false;
    if (Register != other.Register) return false;
    if(!black_.Equals(other.black_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasState) hash ^= State.GetHashCode();
    if (HasLoad) hash ^= Load.GetHashCode();
    if (HasTag) hash ^= Tag.GetHashCode();
    if (HasTime) hash ^= Time.GetHashCode();
    hash ^= white_.GetHashCode();
    if (HasRegister) hash ^= Register.GetHashCode();
    hash ^= black_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasState) {
      output.WriteRawTag(24);
      output.WriteInt32(State);
    }
    if (HasLoad) {
      output.WriteRawTag(32);
      output.WriteInt32(Load);
    }
    if (HasTag) {
      output.WriteRawTag(40);
      output.WriteInt32(Tag);
    }
    if (HasTime) {
      output.WriteRawTag(48);
      output.WriteInt64(Time);
    }
    white_.WriteTo(output, _repeated_white_codec);
    if (HasRegister) {
      output.WriteRawTag(64);
      output.WriteInt32(Register);
    }
    black_.WriteTo(output, _repeated_black_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasState) {
      output.WriteRawTag(24);
      output.WriteInt32(State);
    }
    if (HasLoad) {
      output.WriteRawTag(32);
      output.WriteInt32(Load);
    }
    if (HasTag) {
      output.WriteRawTag(40);
      output.WriteInt32(Tag);
    }
    if (HasTime) {
      output.WriteRawTag(48);
      output.WriteInt64(Time);
    }
    white_.WriteTo(ref output, _repeated_white_codec);
    if (HasRegister) {
      output.WriteRawTag(64);
      output.WriteInt32(Register);
    }
    black_.WriteTo(ref output, _repeated_black_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasState) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (HasLoad) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Load);
    }
    if (HasTag) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
    }
    if (HasTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    size += white_.CalculateSize(_repeated_white_codec);
    if (HasRegister) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Register);
    }
    size += black_.CalculateSize(_repeated_black_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LogicServerInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasState) {
      State = other.State;
    }
    if (other.HasLoad) {
      Load = other.Load;
    }
    if (other.HasTag) {
      Tag = other.Tag;
    }
    if (other.HasTime) {
      Time = other.Time;
    }
    white_.Add(other.white_);
    if (other.HasRegister) {
      Register = other.Register;
    }
    black_.Add(other.black_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          State = input.ReadInt32();
          break;
        }
        case 32: {
          Load = input.ReadInt32();
          break;
        }
        case 40: {
          Tag = input.ReadInt32();
          break;
        }
        case 48: {
          Time = input.ReadInt64();
          break;
        }
        case 58: {
          white_.AddEntriesFrom(input, _repeated_white_codec);
          break;
        }
        case 64: {
          Register = input.ReadInt32();
          break;
        }
        case 74: {
          black_.AddEntriesFrom(input, _repeated_black_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          State = input.ReadInt32();
          break;
        }
        case 32: {
          Load = input.ReadInt32();
          break;
        }
        case 40: {
          Tag = input.ReadInt32();
          break;
        }
        case 48: {
          Time = input.ReadInt64();
          break;
        }
        case 58: {
          white_.AddEntriesFrom(ref input, _repeated_white_codec);
          break;
        }
        case 64: {
          Register = input.ReadInt32();
          break;
        }
        case 74: {
          black_.AddEntriesFrom(ref input, _repeated_black_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RecentLoginServerUnit : pb::IMessage<RecentLoginServerUnit>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RecentLoginServerUnit> _parser = new pb::MessageParser<RecentLoginServerUnit>(() => new RecentLoginServerUnit());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RecentLoginServerUnit> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AuthReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecentLoginServerUnit() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecentLoginServerUnit(RecentLoginServerUnit other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    usetime_ = other.usetime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecentLoginServerUnit Clone() {
    return new RecentLoginServerUnit(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  /// <summary>
  ///区服id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "usetime" field.</summary>
  public const int UsetimeFieldNumber = 2;
  private readonly static long UsetimeDefaultValue = 0L;

  private long usetime_;
  /// <summary>
  ///使用时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Usetime {
    get { if ((_hasBits0 & 2) != 0) { return usetime_; } else { return UsetimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      usetime_ = value;
    }
  }
  /// <summary>Gets whether the "usetime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUsetime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "usetime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUsetime() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RecentLoginServerUnit);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RecentLoginServerUnit other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Usetime != other.Usetime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasUsetime) hash ^= Usetime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasUsetime) {
      output.WriteRawTag(16);
      output.WriteInt64(Usetime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasUsetime) {
      output.WriteRawTag(16);
      output.WriteInt64(Usetime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasUsetime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Usetime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RecentLoginServerUnit other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasUsetime) {
      Usetime = other.Usetime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Usetime = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Usetime = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RecentLoginServerInfo : pb::IMessage<RecentLoginServerInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RecentLoginServerInfo> _parser = new pb::MessageParser<RecentLoginServerInfo>(() => new RecentLoginServerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RecentLoginServerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AuthReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecentLoginServerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecentLoginServerInfo(RecentLoginServerInfo other) : this() {
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecentLoginServerInfo Clone() {
    return new RecentLoginServerInfo(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RecentLoginServerUnit> _repeated_data_codec
      = pb::FieldCodec.ForMessage(10, global::RecentLoginServerUnit.Parser);
  private readonly pbc::RepeatedField<global::RecentLoginServerUnit> data_ = new pbc::RepeatedField<global::RecentLoginServerUnit>();
  /// <summary>
  ///最近区服信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RecentLoginServerUnit> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RecentLoginServerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RecentLoginServerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    data_.WriteTo(ref output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RecentLoginServerInfo other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          data_.AddEntriesFrom(ref input, _repeated_data_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
