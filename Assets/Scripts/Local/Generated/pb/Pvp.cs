// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pvp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pvp.proto</summary>
public static partial class PvpReflection {

  #region Descriptor
  /// <summary>File descriptor for pvp.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PvpReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglwdnAucHJvdG8aDGNvbW1vbi5wcm90bxoLbWFjcm8ucHJvdG8iJQoPR2Ft",
          "ZXJQVlBQaW5nQzJTEhIKCmNsaWVudFRpbWUYASABKAMiOQoPR2FtZXJQVlBQ",
          "aW5nUzJDEhIKCmNsaWVudFRpbWUYASABKAMSEgoKc2VydmVyVGltZRgCIAEo",
          "Aw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonReflection.Descriptor, global::MacroReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GamerPVPPingC2S), global::GamerPVPPingC2S.Parser, new[]{ "ClientTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GamerPVPPingS2C), global::GamerPVPPingS2C.Parser, new[]{ "ClientTime", "ServerTime" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GamerPVPPingC2S : pb::IMessage<GamerPVPPingC2S>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GamerPVPPingC2S> _parser = new pb::MessageParser<GamerPVPPingC2S>(() => new GamerPVPPingC2S());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GamerPVPPingC2S> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamerPVPPingC2S() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamerPVPPingC2S(GamerPVPPingC2S other) : this() {
    _hasBits0 = other._hasBits0;
    clientTime_ = other.clientTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamerPVPPingC2S Clone() {
    return new GamerPVPPingC2S(this);
  }

  /// <summary>Field number for the "clientTime" field.</summary>
  public const int ClientTimeFieldNumber = 1;
  private readonly static long ClientTimeDefaultValue = 0L;

  private long clientTime_;
  /// <summary>
  ///客户端时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ClientTime {
    get { if ((_hasBits0 & 1) != 0) { return clientTime_; } else { return ClientTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientTime_ = value;
    }
  }
  /// <summary>Gets whether the "clientTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clientTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientTime() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GamerPVPPingC2S);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GamerPVPPingC2S other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientTime != other.ClientTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientTime) hash ^= ClientTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClientTime) {
      output.WriteRawTag(8);
      output.WriteInt64(ClientTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClientTime) {
      output.WriteRawTag(8);
      output.WriteInt64(ClientTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GamerPVPPingC2S other) {
    if (other == null) {
      return;
    }
    if (other.HasClientTime) {
      ClientTime = other.ClientTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientTime = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ClientTime = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GamerPVPPingS2C : pb::IMessage<GamerPVPPingS2C>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GamerPVPPingS2C> _parser = new pb::MessageParser<GamerPVPPingS2C>(() => new GamerPVPPingS2C());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GamerPVPPingS2C> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamerPVPPingS2C() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamerPVPPingS2C(GamerPVPPingS2C other) : this() {
    _hasBits0 = other._hasBits0;
    clientTime_ = other.clientTime_;
    serverTime_ = other.serverTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamerPVPPingS2C Clone() {
    return new GamerPVPPingS2C(this);
  }

  /// <summary>Field number for the "clientTime" field.</summary>
  public const int ClientTimeFieldNumber = 1;
  private readonly static long ClientTimeDefaultValue = 0L;

  private long clientTime_;
  /// <summary>
  ///客户端时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ClientTime {
    get { if ((_hasBits0 & 1) != 0) { return clientTime_; } else { return ClientTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientTime_ = value;
    }
  }
  /// <summary>Gets whether the "clientTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clientTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 2;
  private readonly static long ServerTimeDefaultValue = 0L;

  private long serverTime_;
  /// <summary>
  ///服务器时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerTime {
    get { if ((_hasBits0 & 2) != 0) { return serverTime_; } else { return ServerTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serverTime_ = value;
    }
  }
  /// <summary>Gets whether the "serverTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "serverTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerTime() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GamerPVPPingS2C);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GamerPVPPingS2C other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientTime != other.ClientTime) return false;
    if (ServerTime != other.ServerTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientTime) hash ^= ClientTime.GetHashCode();
    if (HasServerTime) hash ^= ServerTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClientTime) {
      output.WriteRawTag(8);
      output.WriteInt64(ClientTime);
    }
    if (HasServerTime) {
      output.WriteRawTag(16);
      output.WriteInt64(ServerTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClientTime) {
      output.WriteRawTag(8);
      output.WriteInt64(ClientTime);
    }
    if (HasServerTime) {
      output.WriteRawTag(16);
      output.WriteInt64(ServerTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTime);
    }
    if (HasServerTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GamerPVPPingS2C other) {
    if (other == null) {
      return;
    }
    if (other.HasClientTime) {
      ClientTime = other.ClientTime;
    }
    if (other.HasServerTime) {
      ServerTime = other.ServerTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientTime = input.ReadInt64();
          break;
        }
        case 16: {
          ServerTime = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ClientTime = input.ReadInt64();
          break;
        }
        case 16: {
          ServerTime = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
