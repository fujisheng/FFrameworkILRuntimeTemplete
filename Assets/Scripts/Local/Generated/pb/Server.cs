// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: server.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from server.proto</summary>
public static partial class ServerReflection {

  #region Descriptor
  /// <summary>File descriptor for server.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ServerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxzZXJ2ZXIucHJvdG8aDGNvbW1vbi5wcm90byLcAQoKU2VydmVySW5mbxIK",
          "CgJpZBgBIAEoBRIMCgRuYW1lGAMgASgJEg8KB2NtZEFkZHIYBCABKAkSDwoH",
          "cnBjQWRkchgFIAEoCRIPCgdleHRBZGRyGAYgASgJEhAKCGxhc3RUaWNrGAcg",
          "ASgDEhIKCnNlcnZlclR5cGUYCCABKAkSDAoEbG9hZBgJIAEoBRIMCgRjb25m",
          "GAogASgJEhMKC29ubGluZUNvdW50GAsgASgFEgsKA21kNRgMIAEoCRIOCgZy",
          "ZWdpb24YDSABKAkSDQoFcm91dGUYDiABKAUiVAoKU2VydmVyV2FybhIOCgZi",
          "YWRScGMYASADKAUSEQoJbGFzdFBhbmljGAIgASgFEhIKCnBhbmljQ291bnQY",
          "AyABKAUSDwoHZ29TY2FsZRgEIAEoCCIqCgpTZXJ2ZXJQaW5nEg0KBWNvdW50",
          "GAEgASgFEg0KBXRvdGFsGAIgASgFIj8KDkNoZWNrUFZQUmVjb25uEg8KB3Nl",
          "c3Npb24YASABKAMSCwoDZ2lkGAIgASgFEg8KB2lzQ2hlY2sYBCABKAgiGgoH",
          "U3RvcFBWUBIPCgdzZXNzaW9uGAEgASgDIjgKClBWUENEQ2xlYXISDwoHc2Vz",
          "c2lvbhgBIAEoAxIKCgJpZBgCIAEoBRINCgVpbmRleBgDIAEoBSIcCg1QVlBE",
          "aXNDb25uZWN0EgsKA3BvcxgBIAEoBSIzChNDbHViU2VydmVyQ2hhbmdlQzJD",
          "Eg4KBmNsdWJJZBgBIAEoBRIMCgRwc2lkGAIgASgFIigKDFJwY05ld0ZyaWVu",
          "ZBILCgNnaWQYASABKAMSCwoDZmlkGAIgASgDIjYKDVJwY0ZyaWVuZEdpZnQS",
          "CwoDZ2lkGAEgASgDEgsKA2ZpZBgCIAEoAxILCgNhZGQYAyABKAUiOAoOUnBj",
          "R2FtZXJSZXBvcnQSCwoDZ2lkGAEgASgDEgsKA2JpZBgCIAEoAxIMCgR1dWlk",
          "GAMgASgDIkAKFFJwY0tpY2tGaWdodEF0dGFja2VkEgsKA2dpZBgBIAEoAxIN",
          "CgVzY29yZRgCIAEoBRIMCgRyYW5rGAMgASgFIo0BCgdQYXltZW50Eg8KB2Fj",
          "Y291bnQYASABKAkSCwoDZ2lkGAIgASgDEgwKBHpvbmUYAyABKAUSEAoIb3Jk",
          "ZXJfaWQYBCABKAMSDgoGcGF5X2lkGAUgASgFEg4KBmFtb3VudBgGIAEoCRIQ",
          "Cghpc19ibGFjaxgHIAEoBRISCgpvcmRlcl90eXBlGAggASgFIk8KE1JwY0lu",
          "dml0ZUNvZGVWZXJpZnkSEgoKaW52aXRlckdpZBgBIAEoAxISCgppbnZpdGVD",
          "b2RlGAIgASgJEhAKCHZlcmlmeUlkGAMgASgDIlEKGVJwY0ludml0ZUNvZGVW",
          "ZXJpZnlSZXN1bHQSEgoKaW52aXRlckdpZBgBIAEoAxIQCgh2ZXJpZnlJZBgC",
          "IAEoAxIOCgZyZXN1bHQYAyABKAUiUQoSUnBjQWRkSW52aXRlclNjb3JlEhIK",
          "Cmludml0ZXJHaWQYASABKAMSEAoIYWRkU2NvcmUYAiABKAUSFQoNY29udHJp",
          "YnV0ZUdpZBgDIAEoAyIWChRScGNSZWNlaXZlRnJpZW5kR2lmdCI4CgxScGNB",
          "ZGRGYXZvdXISCwoDZ2lkGAEgASgDEgsKA2ZpZBgCIAEoAxIOCgZmYXZvdXIY",
          "AyABKAUiLQoRUnBjU3ByaW5nV2lzaEhlbHASCwoDZ2lkGAEgASgDEgsKA2Zp",
          "ZBgCIAEoAyJBChdScGNTcHJpbmdXaXNoSGVscFJlc3VsdBILCgNnaWQYASAB",
          "KAMSCwoDZmlkGAIgASgDEgwKBGNvZGUYAyABKAU="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerInfo), global::ServerInfo.Parser, new[]{ "Id", "Name", "CmdAddr", "RpcAddr", "ExtAddr", "LastTick", "ServerType", "Load", "Conf", "OnlineCount", "Md5", "Region", "Route" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerWarn), global::ServerWarn.Parser, new[]{ "BadRpc", "LastPanic", "PanicCount", "GoScale" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerPing), global::ServerPing.Parser, new[]{ "Count", "Total" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckPVPReconn), global::CheckPVPReconn.Parser, new[]{ "Session", "Gid", "IsCheck" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StopPVP), global::StopPVP.Parser, new[]{ "Session" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PVPCDClear), global::PVPCDClear.Parser, new[]{ "Session", "Id", "Index" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PVPDisConnect), global::PVPDisConnect.Parser, new[]{ "Pos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClubServerChangeC2C), global::ClubServerChangeC2C.Parser, new[]{ "ClubId", "Psid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcNewFriend), global::RpcNewFriend.Parser, new[]{ "Gid", "Fid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcFriendGift), global::RpcFriendGift.Parser, new[]{ "Gid", "Fid", "Add" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcGamerReport), global::RpcGamerReport.Parser, new[]{ "Gid", "Bid", "Uuid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcKickFightAttacked), global::RpcKickFightAttacked.Parser, new[]{ "Gid", "Score", "Rank" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Payment), global::Payment.Parser, new[]{ "Account", "Gid", "Zone", "OrderId", "PayId", "Amount", "IsBlack", "OrderType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcInviteCodeVerify), global::RpcInviteCodeVerify.Parser, new[]{ "InviterGid", "InviteCode", "VerifyId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcInviteCodeVerifyResult), global::RpcInviteCodeVerifyResult.Parser, new[]{ "InviterGid", "VerifyId", "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcAddInviterScore), global::RpcAddInviterScore.Parser, new[]{ "InviterGid", "AddScore", "ContributeGid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcReceiveFriendGift), global::RpcReceiveFriendGift.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcAddFavour), global::RpcAddFavour.Parser, new[]{ "Gid", "Fid", "Favour" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcSpringWishHelp), global::RpcSpringWishHelp.Parser, new[]{ "Gid", "Fid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RpcSpringWishHelpResult), global::RpcSpringWishHelpResult.Parser, new[]{ "Gid", "Fid", "Code" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ServerInfo : pb::IMessage<ServerInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerInfo(ServerInfo other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    cmdAddr_ = other.cmdAddr_;
    rpcAddr_ = other.rpcAddr_;
    extAddr_ = other.extAddr_;
    lastTick_ = other.lastTick_;
    serverType_ = other.serverType_;
    load_ = other.load_;
    conf_ = other.conf_;
    onlineCount_ = other.onlineCount_;
    md5_ = other.md5_;
    region_ = other.region_;
    route_ = other.route_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerInfo Clone() {
    return new ServerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  /// <summary>
  ///服务器id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "cmdAddr" field.</summary>
  public const int CmdAddrFieldNumber = 4;
  private readonly static string CmdAddrDefaultValue = "";

  private string cmdAddr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CmdAddr {
    get { return cmdAddr_ ?? CmdAddrDefaultValue; }
    set {
      cmdAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "cmdAddr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCmdAddr {
    get { return cmdAddr_ != null; }
  }
  /// <summary>Clears the value of the "cmdAddr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCmdAddr() {
    cmdAddr_ = null;
  }

  /// <summary>Field number for the "rpcAddr" field.</summary>
  public const int RpcAddrFieldNumber = 5;
  private readonly static string RpcAddrDefaultValue = "";

  private string rpcAddr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RpcAddr {
    get { return rpcAddr_ ?? RpcAddrDefaultValue; }
    set {
      rpcAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "rpcAddr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRpcAddr {
    get { return rpcAddr_ != null; }
  }
  /// <summary>Clears the value of the "rpcAddr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRpcAddr() {
    rpcAddr_ = null;
  }

  /// <summary>Field number for the "extAddr" field.</summary>
  public const int ExtAddrFieldNumber = 6;
  private readonly static string ExtAddrDefaultValue = "";

  private string extAddr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ExtAddr {
    get { return extAddr_ ?? ExtAddrDefaultValue; }
    set {
      extAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "extAddr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExtAddr {
    get { return extAddr_ != null; }
  }
  /// <summary>Clears the value of the "extAddr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExtAddr() {
    extAddr_ = null;
  }

  /// <summary>Field number for the "lastTick" field.</summary>
  public const int LastTickFieldNumber = 7;
  private readonly static long LastTickDefaultValue = 0L;

  private long lastTick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastTick {
    get { if ((_hasBits0 & 2) != 0) { return lastTick_; } else { return LastTickDefaultValue; } }
    set {
      _hasBits0 |= 2;
      lastTick_ = value;
    }
  }
  /// <summary>Gets whether the "lastTick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastTick {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "lastTick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastTick() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "serverType" field.</summary>
  public const int ServerTypeFieldNumber = 8;
  private readonly static string ServerTypeDefaultValue = "";

  private string serverType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerType {
    get { return serverType_ ?? ServerTypeDefaultValue; }
    set {
      serverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "serverType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerType {
    get { return serverType_ != null; }
  }
  /// <summary>Clears the value of the "serverType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerType() {
    serverType_ = null;
  }

  /// <summary>Field number for the "load" field.</summary>
  public const int LoadFieldNumber = 9;
  private readonly static int LoadDefaultValue = 0;

  private int load_;
  /// <summary>
  ///负载
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Load {
    get { if ((_hasBits0 & 4) != 0) { return load_; } else { return LoadDefaultValue; } }
    set {
      _hasBits0 |= 4;
      load_ = value;
    }
  }
  /// <summary>Gets whether the "load" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLoad {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "load" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLoad() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "conf" field.</summary>
  public const int ConfFieldNumber = 10;
  private readonly static string ConfDefaultValue = "";

  private string conf_;
  /// <summary>
  ///配置文件
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Conf {
    get { return conf_ ?? ConfDefaultValue; }
    set {
      conf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "conf" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConf {
    get { return conf_ != null; }
  }
  /// <summary>Clears the value of the "conf" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConf() {
    conf_ = null;
  }

  /// <summary>Field number for the "onlineCount" field.</summary>
  public const int OnlineCountFieldNumber = 11;
  private readonly static int OnlineCountDefaultValue = 0;

  private int onlineCount_;
  /// <summary>
  ///在线玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnlineCount {
    get { if ((_hasBits0 & 8) != 0) { return onlineCount_; } else { return OnlineCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      onlineCount_ = value;
    }
  }
  /// <summary>Gets whether the "onlineCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOnlineCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "onlineCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOnlineCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "md5" field.</summary>
  public const int Md5FieldNumber = 12;
  private readonly static string Md5DefaultValue = "";

  private string md5_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Md5 {
    get { return md5_ ?? Md5DefaultValue; }
    set {
      md5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "md5" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMd5 {
    get { return md5_ != null; }
  }
  /// <summary>Clears the value of the "md5" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMd5() {
    md5_ = null;
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 13;
  private readonly static string RegionDefaultValue = "";

  private string region_;
  /// <summary>
  ///部署的区域
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return region_ ?? RegionDefaultValue; }
    set {
      region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "region" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRegion {
    get { return region_ != null; }
  }
  /// <summary>Clears the value of the "region" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRegion() {
    region_ = null;
  }

  /// <summary>Field number for the "route" field.</summary>
  public const int RouteFieldNumber = 14;
  private readonly static int RouteDefaultValue = 0;

  private int route_;
  /// <summary>
  ///灰度更新,0默认 1更新
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Route {
    get { if ((_hasBits0 & 16) != 0) { return route_; } else { return RouteDefaultValue; } }
    set {
      _hasBits0 |= 16;
      route_ = value;
    }
  }
  /// <summary>Gets whether the "route" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRoute {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "route" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRoute() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (CmdAddr != other.CmdAddr) return false;
    if (RpcAddr != other.RpcAddr) return false;
    if (ExtAddr != other.ExtAddr) return false;
    if (LastTick != other.LastTick) return false;
    if (ServerType != other.ServerType) return false;
    if (Load != other.Load) return false;
    if (Conf != other.Conf) return false;
    if (OnlineCount != other.OnlineCount) return false;
    if (Md5 != other.Md5) return false;
    if (Region != other.Region) return false;
    if (Route != other.Route) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasCmdAddr) hash ^= CmdAddr.GetHashCode();
    if (HasRpcAddr) hash ^= RpcAddr.GetHashCode();
    if (HasExtAddr) hash ^= ExtAddr.GetHashCode();
    if (HasLastTick) hash ^= LastTick.GetHashCode();
    if (HasServerType) hash ^= ServerType.GetHashCode();
    if (HasLoad) hash ^= Load.GetHashCode();
    if (HasConf) hash ^= Conf.GetHashCode();
    if (HasOnlineCount) hash ^= OnlineCount.GetHashCode();
    if (HasMd5) hash ^= Md5.GetHashCode();
    if (HasRegion) hash ^= Region.GetHashCode();
    if (HasRoute) hash ^= Route.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasCmdAddr) {
      output.WriteRawTag(34);
      output.WriteString(CmdAddr);
    }
    if (HasRpcAddr) {
      output.WriteRawTag(42);
      output.WriteString(RpcAddr);
    }
    if (HasExtAddr) {
      output.WriteRawTag(50);
      output.WriteString(ExtAddr);
    }
    if (HasLastTick) {
      output.WriteRawTag(56);
      output.WriteInt64(LastTick);
    }
    if (HasServerType) {
      output.WriteRawTag(66);
      output.WriteString(ServerType);
    }
    if (HasLoad) {
      output.WriteRawTag(72);
      output.WriteInt32(Load);
    }
    if (HasConf) {
      output.WriteRawTag(82);
      output.WriteString(Conf);
    }
    if (HasOnlineCount) {
      output.WriteRawTag(88);
      output.WriteInt32(OnlineCount);
    }
    if (HasMd5) {
      output.WriteRawTag(98);
      output.WriteString(Md5);
    }
    if (HasRegion) {
      output.WriteRawTag(106);
      output.WriteString(Region);
    }
    if (HasRoute) {
      output.WriteRawTag(112);
      output.WriteInt32(Route);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasCmdAddr) {
      output.WriteRawTag(34);
      output.WriteString(CmdAddr);
    }
    if (HasRpcAddr) {
      output.WriteRawTag(42);
      output.WriteString(RpcAddr);
    }
    if (HasExtAddr) {
      output.WriteRawTag(50);
      output.WriteString(ExtAddr);
    }
    if (HasLastTick) {
      output.WriteRawTag(56);
      output.WriteInt64(LastTick);
    }
    if (HasServerType) {
      output.WriteRawTag(66);
      output.WriteString(ServerType);
    }
    if (HasLoad) {
      output.WriteRawTag(72);
      output.WriteInt32(Load);
    }
    if (HasConf) {
      output.WriteRawTag(82);
      output.WriteString(Conf);
    }
    if (HasOnlineCount) {
      output.WriteRawTag(88);
      output.WriteInt32(OnlineCount);
    }
    if (HasMd5) {
      output.WriteRawTag(98);
      output.WriteString(Md5);
    }
    if (HasRegion) {
      output.WriteRawTag(106);
      output.WriteString(Region);
    }
    if (HasRoute) {
      output.WriteRawTag(112);
      output.WriteInt32(Route);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasCmdAddr) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdAddr);
    }
    if (HasRpcAddr) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcAddr);
    }
    if (HasExtAddr) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtAddr);
    }
    if (HasLastTick) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastTick);
    }
    if (HasServerType) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerType);
    }
    if (HasLoad) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Load);
    }
    if (HasConf) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Conf);
    }
    if (HasOnlineCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineCount);
    }
    if (HasMd5) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5);
    }
    if (HasRegion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (HasRoute) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Route);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasCmdAddr) {
      CmdAddr = other.CmdAddr;
    }
    if (other.HasRpcAddr) {
      RpcAddr = other.RpcAddr;
    }
    if (other.HasExtAddr) {
      ExtAddr = other.ExtAddr;
    }
    if (other.HasLastTick) {
      LastTick = other.LastTick;
    }
    if (other.HasServerType) {
      ServerType = other.ServerType;
    }
    if (other.HasLoad) {
      Load = other.Load;
    }
    if (other.HasConf) {
      Conf = other.Conf;
    }
    if (other.HasOnlineCount) {
      OnlineCount = other.OnlineCount;
    }
    if (other.HasMd5) {
      Md5 = other.Md5;
    }
    if (other.HasRegion) {
      Region = other.Region;
    }
    if (other.HasRoute) {
      Route = other.Route;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          CmdAddr = input.ReadString();
          break;
        }
        case 42: {
          RpcAddr = input.ReadString();
          break;
        }
        case 50: {
          ExtAddr = input.ReadString();
          break;
        }
        case 56: {
          LastTick = input.ReadInt64();
          break;
        }
        case 66: {
          ServerType = input.ReadString();
          break;
        }
        case 72: {
          Load = input.ReadInt32();
          break;
        }
        case 82: {
          Conf = input.ReadString();
          break;
        }
        case 88: {
          OnlineCount = input.ReadInt32();
          break;
        }
        case 98: {
          Md5 = input.ReadString();
          break;
        }
        case 106: {
          Region = input.ReadString();
          break;
        }
        case 112: {
          Route = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          CmdAddr = input.ReadString();
          break;
        }
        case 42: {
          RpcAddr = input.ReadString();
          break;
        }
        case 50: {
          ExtAddr = input.ReadString();
          break;
        }
        case 56: {
          LastTick = input.ReadInt64();
          break;
        }
        case 66: {
          ServerType = input.ReadString();
          break;
        }
        case 72: {
          Load = input.ReadInt32();
          break;
        }
        case 82: {
          Conf = input.ReadString();
          break;
        }
        case 88: {
          OnlineCount = input.ReadInt32();
          break;
        }
        case 98: {
          Md5 = input.ReadString();
          break;
        }
        case 106: {
          Region = input.ReadString();
          break;
        }
        case 112: {
          Route = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ServerWarn : pb::IMessage<ServerWarn>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ServerWarn> _parser = new pb::MessageParser<ServerWarn>(() => new ServerWarn());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerWarn> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerWarn() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerWarn(ServerWarn other) : this() {
    _hasBits0 = other._hasBits0;
    badRpc_ = other.badRpc_.Clone();
    lastPanic_ = other.lastPanic_;
    panicCount_ = other.panicCount_;
    goScale_ = other.goScale_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerWarn Clone() {
    return new ServerWarn(this);
  }

  /// <summary>Field number for the "badRpc" field.</summary>
  public const int BadRpcFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_badRpc_codec
      = pb::FieldCodec.ForInt32(8);
  private readonly pbc::RepeatedField<int> badRpc_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BadRpc {
    get { return badRpc_; }
  }

  /// <summary>Field number for the "lastPanic" field.</summary>
  public const int LastPanicFieldNumber = 2;
  private readonly static int LastPanicDefaultValue = 0;

  private int lastPanic_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastPanic {
    get { if ((_hasBits0 & 1) != 0) { return lastPanic_; } else { return LastPanicDefaultValue; } }
    set {
      _hasBits0 |= 1;
      lastPanic_ = value;
    }
  }
  /// <summary>Gets whether the "lastPanic" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastPanic {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "lastPanic" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastPanic() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "panicCount" field.</summary>
  public const int PanicCountFieldNumber = 3;
  private readonly static int PanicCountDefaultValue = 0;

  private int panicCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PanicCount {
    get { if ((_hasBits0 & 2) != 0) { return panicCount_; } else { return PanicCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      panicCount_ = value;
    }
  }
  /// <summary>Gets whether the "panicCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPanicCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "panicCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPanicCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "goScale" field.</summary>
  public const int GoScaleFieldNumber = 4;
  private readonly static bool GoScaleDefaultValue = false;

  private bool goScale_;
  /// <summary>
  ///goroutine比例是否失衡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GoScale {
    get { if ((_hasBits0 & 4) != 0) { return goScale_; } else { return GoScaleDefaultValue; } }
    set {
      _hasBits0 |= 4;
      goScale_ = value;
    }
  }
  /// <summary>Gets whether the "goScale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGoScale {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "goScale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGoScale() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerWarn);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerWarn other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!badRpc_.Equals(other.badRpc_)) return false;
    if (LastPanic != other.LastPanic) return false;
    if (PanicCount != other.PanicCount) return false;
    if (GoScale != other.GoScale) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= badRpc_.GetHashCode();
    if (HasLastPanic) hash ^= LastPanic.GetHashCode();
    if (HasPanicCount) hash ^= PanicCount.GetHashCode();
    if (HasGoScale) hash ^= GoScale.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    badRpc_.WriteTo(output, _repeated_badRpc_codec);
    if (HasLastPanic) {
      output.WriteRawTag(16);
      output.WriteInt32(LastPanic);
    }
    if (HasPanicCount) {
      output.WriteRawTag(24);
      output.WriteInt32(PanicCount);
    }
    if (HasGoScale) {
      output.WriteRawTag(32);
      output.WriteBool(GoScale);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    badRpc_.WriteTo(ref output, _repeated_badRpc_codec);
    if (HasLastPanic) {
      output.WriteRawTag(16);
      output.WriteInt32(LastPanic);
    }
    if (HasPanicCount) {
      output.WriteRawTag(24);
      output.WriteInt32(PanicCount);
    }
    if (HasGoScale) {
      output.WriteRawTag(32);
      output.WriteBool(GoScale);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += badRpc_.CalculateSize(_repeated_badRpc_codec);
    if (HasLastPanic) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastPanic);
    }
    if (HasPanicCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PanicCount);
    }
    if (HasGoScale) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerWarn other) {
    if (other == null) {
      return;
    }
    badRpc_.Add(other.badRpc_);
    if (other.HasLastPanic) {
      LastPanic = other.LastPanic;
    }
    if (other.HasPanicCount) {
      PanicCount = other.PanicCount;
    }
    if (other.HasGoScale) {
      GoScale = other.GoScale;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          badRpc_.AddEntriesFrom(input, _repeated_badRpc_codec);
          break;
        }
        case 16: {
          LastPanic = input.ReadInt32();
          break;
        }
        case 24: {
          PanicCount = input.ReadInt32();
          break;
        }
        case 32: {
          GoScale = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10:
        case 8: {
          badRpc_.AddEntriesFrom(ref input, _repeated_badRpc_codec);
          break;
        }
        case 16: {
          LastPanic = input.ReadInt32();
          break;
        }
        case 24: {
          PanicCount = input.ReadInt32();
          break;
        }
        case 32: {
          GoScale = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ServerPing : pb::IMessage<ServerPing>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ServerPing> _parser = new pb::MessageParser<ServerPing>(() => new ServerPing());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerPing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerPing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerPing(ServerPing other) : this() {
    _hasBits0 = other._hasBits0;
    count_ = other.count_;
    total_ = other.total_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerPing Clone() {
    return new ServerPing(this);
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 1;
  private readonly static int CountDefaultValue = 0;

  private int count_;
  /// <summary>
  ///ping次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      count_ = value;
    }
  }
  /// <summary>Gets whether the "count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "total" field.</summary>
  public const int TotalFieldNumber = 2;
  private readonly static int TotalDefaultValue = 0;

  private int total_;
  /// <summary>
  ///ping累加值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Total {
    get { if ((_hasBits0 & 2) != 0) { return total_; } else { return TotalDefaultValue; } }
    set {
      _hasBits0 |= 2;
      total_ = value;
    }
  }
  /// <summary>Gets whether the "total" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTotal {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "total" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTotal() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerPing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerPing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Count != other.Count) return false;
    if (Total != other.Total) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCount) hash ^= Count.GetHashCode();
    if (HasTotal) hash ^= Total.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCount) {
      output.WriteRawTag(8);
      output.WriteInt32(Count);
    }
    if (HasTotal) {
      output.WriteRawTag(16);
      output.WriteInt32(Total);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCount) {
      output.WriteRawTag(8);
      output.WriteInt32(Count);
    }
    if (HasTotal) {
      output.WriteRawTag(16);
      output.WriteInt32(Total);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (HasTotal) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerPing other) {
    if (other == null) {
      return;
    }
    if (other.HasCount) {
      Count = other.Count;
    }
    if (other.HasTotal) {
      Total = other.Total;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Count = input.ReadInt32();
          break;
        }
        case 16: {
          Total = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Count = input.ReadInt32();
          break;
        }
        case 16: {
          Total = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CheckPVPReconn : pb::IMessage<CheckPVPReconn>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CheckPVPReconn> _parser = new pb::MessageParser<CheckPVPReconn>(() => new CheckPVPReconn());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CheckPVPReconn> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckPVPReconn() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckPVPReconn(CheckPVPReconn other) : this() {
    _hasBits0 = other._hasBits0;
    session_ = other.session_;
    gid_ = other.gid_;
    isCheck_ = other.isCheck_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckPVPReconn Clone() {
    return new CheckPVPReconn(this);
  }

  /// <summary>Field number for the "session" field.</summary>
  public const int SessionFieldNumber = 1;
  private readonly static long SessionDefaultValue = 0L;

  private long session_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Session {
    get { if ((_hasBits0 & 1) != 0) { return session_; } else { return SessionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      session_ = value;
    }
  }
  /// <summary>Gets whether the "session" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSession {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "session" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSession() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 2;
  private readonly static int GidDefaultValue = 0;

  private int gid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gid {
    get { if ((_hasBits0 & 2) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "isCheck" field.</summary>
  public const int IsCheckFieldNumber = 4;
  private readonly static bool IsCheckDefaultValue = false;

  private bool isCheck_;
  /// <summary>
  ///optional GamerPVPMatch match   = 3;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsCheck {
    get { if ((_hasBits0 & 4) != 0) { return isCheck_; } else { return IsCheckDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isCheck_ = value;
    }
  }
  /// <summary>Gets whether the "isCheck" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsCheck {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "isCheck" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsCheck() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CheckPVPReconn);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CheckPVPReconn other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Session != other.Session) return false;
    if (Gid != other.Gid) return false;
    if (IsCheck != other.IsCheck) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSession) hash ^= Session.GetHashCode();
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasIsCheck) hash ^= IsCheck.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSession) {
      output.WriteRawTag(8);
      output.WriteInt64(Session);
    }
    if (HasGid) {
      output.WriteRawTag(16);
      output.WriteInt32(Gid);
    }
    if (HasIsCheck) {
      output.WriteRawTag(32);
      output.WriteBool(IsCheck);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSession) {
      output.WriteRawTag(8);
      output.WriteInt64(Session);
    }
    if (HasGid) {
      output.WriteRawTag(16);
      output.WriteInt32(Gid);
    }
    if (HasIsCheck) {
      output.WriteRawTag(32);
      output.WriteBool(IsCheck);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSession) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Session);
    }
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
    }
    if (HasIsCheck) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CheckPVPReconn other) {
    if (other == null) {
      return;
    }
    if (other.HasSession) {
      Session = other.Session;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasIsCheck) {
      IsCheck = other.IsCheck;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Session = input.ReadInt64();
          break;
        }
        case 16: {
          Gid = input.ReadInt32();
          break;
        }
        case 32: {
          IsCheck = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Session = input.ReadInt64();
          break;
        }
        case 16: {
          Gid = input.ReadInt32();
          break;
        }
        case 32: {
          IsCheck = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class StopPVP : pb::IMessage<StopPVP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<StopPVP> _parser = new pb::MessageParser<StopPVP>(() => new StopPVP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StopPVP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StopPVP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StopPVP(StopPVP other) : this() {
    _hasBits0 = other._hasBits0;
    session_ = other.session_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StopPVP Clone() {
    return new StopPVP(this);
  }

  /// <summary>Field number for the "session" field.</summary>
  public const int SessionFieldNumber = 1;
  private readonly static long SessionDefaultValue = 0L;

  private long session_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Session {
    get { if ((_hasBits0 & 1) != 0) { return session_; } else { return SessionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      session_ = value;
    }
  }
  /// <summary>Gets whether the "session" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSession {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "session" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSession() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StopPVP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StopPVP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Session != other.Session) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSession) hash ^= Session.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSession) {
      output.WriteRawTag(8);
      output.WriteInt64(Session);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSession) {
      output.WriteRawTag(8);
      output.WriteInt64(Session);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSession) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Session);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StopPVP other) {
    if (other == null) {
      return;
    }
    if (other.HasSession) {
      Session = other.Session;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Session = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Session = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PVPCDClear : pb::IMessage<PVPCDClear>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PVPCDClear> _parser = new pb::MessageParser<PVPCDClear>(() => new PVPCDClear());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PVPCDClear> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PVPCDClear() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PVPCDClear(PVPCDClear other) : this() {
    _hasBits0 = other._hasBits0;
    session_ = other.session_;
    id_ = other.id_;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PVPCDClear Clone() {
    return new PVPCDClear(this);
  }

  /// <summary>Field number for the "session" field.</summary>
  public const int SessionFieldNumber = 1;
  private readonly static long SessionDefaultValue = 0L;

  private long session_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Session {
    get { if ((_hasBits0 & 1) != 0) { return session_; } else { return SessionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      session_ = value;
    }
  }
  /// <summary>Gets whether the "session" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSession {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "session" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSession() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { if ((_hasBits0 & 2) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 3;
  private readonly static int IndexDefaultValue = 0;

  private int index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { if ((_hasBits0 & 4) != 0) { return index_; } else { return IndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      index_ = value;
    }
  }
  /// <summary>Gets whether the "index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndex() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PVPCDClear);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PVPCDClear other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Session != other.Session) return false;
    if (Id != other.Id) return false;
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSession) hash ^= Session.GetHashCode();
    if (HasId) hash ^= Id.GetHashCode();
    if (HasIndex) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSession) {
      output.WriteRawTag(8);
      output.WriteInt64(Session);
    }
    if (HasId) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (HasIndex) {
      output.WriteRawTag(24);
      output.WriteInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSession) {
      output.WriteRawTag(8);
      output.WriteInt64(Session);
    }
    if (HasId) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (HasIndex) {
      output.WriteRawTag(24);
      output.WriteInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSession) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Session);
    }
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PVPCDClear other) {
    if (other == null) {
      return;
    }
    if (other.HasSession) {
      Session = other.Session;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasIndex) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Session = input.ReadInt64();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 24: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Session = input.ReadInt64();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 24: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PVPDisConnect : pb::IMessage<PVPDisConnect>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PVPDisConnect> _parser = new pb::MessageParser<PVPDisConnect>(() => new PVPDisConnect());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PVPDisConnect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PVPDisConnect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PVPDisConnect(PVPDisConnect other) : this() {
    _hasBits0 = other._hasBits0;
    pos_ = other.pos_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PVPDisConnect Clone() {
    return new PVPDisConnect(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private readonly static int PosDefaultValue = 0;

  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { if ((_hasBits0 & 1) != 0) { return pos_; } else { return PosDefaultValue; } }
    set {
      _hasBits0 |= 1;
      pos_ = value;
    }
  }
  /// <summary>Gets whether the "pos" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPos {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "pos" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPos() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PVPDisConnect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PVPDisConnect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPos) hash ^= Pos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPos) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPos) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPos) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PVPDisConnect other) {
    if (other == null) {
      return;
    }
    if (other.HasPos) {
      Pos = other.Pos;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ClubServerChangeC2C : pb::IMessage<ClubServerChangeC2C>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ClubServerChangeC2C> _parser = new pb::MessageParser<ClubServerChangeC2C>(() => new ClubServerChangeC2C());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClubServerChangeC2C> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubServerChangeC2C() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubServerChangeC2C(ClubServerChangeC2C other) : this() {
    _hasBits0 = other._hasBits0;
    clubId_ = other.clubId_;
    psid_ = other.psid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubServerChangeC2C Clone() {
    return new ClubServerChangeC2C(this);
  }

  /// <summary>Field number for the "clubId" field.</summary>
  public const int ClubIdFieldNumber = 1;
  private readonly static int ClubIdDefaultValue = 0;

  private int clubId_;
  /// <summary>
  ///俱乐部id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubId {
    get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clubId_ = value;
    }
  }
  /// <summary>Gets whether the "clubId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClubId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clubId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClubId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "psid" field.</summary>
  public const int PsidFieldNumber = 2;
  private readonly static int PsidDefaultValue = 0;

  private int psid_;
  /// <summary>
  ///服务器id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Psid {
    get { if ((_hasBits0 & 2) != 0) { return psid_; } else { return PsidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      psid_ = value;
    }
  }
  /// <summary>Gets whether the "psid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPsid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "psid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPsid() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClubServerChangeC2C);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClubServerChangeC2C other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClubId != other.ClubId) return false;
    if (Psid != other.Psid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubId) hash ^= ClubId.GetHashCode();
    if (HasPsid) hash ^= Psid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubId) {
      output.WriteRawTag(8);
      output.WriteInt32(ClubId);
    }
    if (HasPsid) {
      output.WriteRawTag(16);
      output.WriteInt32(Psid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubId) {
      output.WriteRawTag(8);
      output.WriteInt32(ClubId);
    }
    if (HasPsid) {
      output.WriteRawTag(16);
      output.WriteInt32(Psid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClubId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubId);
    }
    if (HasPsid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Psid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClubServerChangeC2C other) {
    if (other == null) {
      return;
    }
    if (other.HasClubId) {
      ClubId = other.ClubId;
    }
    if (other.HasPsid) {
      Psid = other.Psid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClubId = input.ReadInt32();
          break;
        }
        case 16: {
          Psid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ClubId = input.ReadInt32();
          break;
        }
        case 16: {
          Psid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcNewFriend : pb::IMessage<RpcNewFriend>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcNewFriend> _parser = new pb::MessageParser<RpcNewFriend>(() => new RpcNewFriend());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcNewFriend> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcNewFriend() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcNewFriend(RpcNewFriend other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    fid_ = other.fid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcNewFriend Clone() {
    return new RpcNewFriend(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///自己ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fid" field.</summary>
  public const int FidFieldNumber = 2;
  private readonly static long FidDefaultValue = 0L;

  private long fid_;
  /// <summary>
  ///加的好友ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Fid {
    get { if ((_hasBits0 & 2) != 0) { return fid_; } else { return FidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fid_ = value;
    }
  }
  /// <summary>Gets whether the "fid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFid() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcNewFriend);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcNewFriend other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Fid != other.Fid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasFid) hash ^= Fid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasFid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcNewFriend other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasFid) {
      Fid = other.Fid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcFriendGift : pb::IMessage<RpcFriendGift>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcFriendGift> _parser = new pb::MessageParser<RpcFriendGift>(() => new RpcFriendGift());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcFriendGift> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcFriendGift() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcFriendGift(RpcFriendGift other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    fid_ = other.fid_;
    add_ = other.add_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcFriendGift Clone() {
    return new RpcFriendGift(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///送礼者ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fid" field.</summary>
  public const int FidFieldNumber = 2;
  private readonly static long FidDefaultValue = 0L;

  private long fid_;
  /// <summary>
  ///接收者ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Fid {
    get { if ((_hasBits0 & 2) != 0) { return fid_; } else { return FidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fid_ = value;
    }
  }
  /// <summary>Gets whether the "fid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "add" field.</summary>
  public const int AddFieldNumber = 3;
  private readonly static int AddDefaultValue = 0;

  private int add_;
  /// <summary>
  ///增加的好感度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Add {
    get { if ((_hasBits0 & 4) != 0) { return add_; } else { return AddDefaultValue; } }
    set {
      _hasBits0 |= 4;
      add_ = value;
    }
  }
  /// <summary>Gets whether the "add" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdd {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "add" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdd() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcFriendGift);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcFriendGift other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Fid != other.Fid) return false;
    if (Add != other.Add) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasFid) hash ^= Fid.GetHashCode();
    if (HasAdd) hash ^= Add.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (HasAdd) {
      output.WriteRawTag(24);
      output.WriteInt32(Add);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (HasAdd) {
      output.WriteRawTag(24);
      output.WriteInt32(Add);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasFid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fid);
    }
    if (HasAdd) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Add);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcFriendGift other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasFid) {
      Fid = other.Fid;
    }
    if (other.HasAdd) {
      Add = other.Add;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
        case 24: {
          Add = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
        case 24: {
          Add = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcGamerReport : pb::IMessage<RpcGamerReport>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcGamerReport> _parser = new pb::MessageParser<RpcGamerReport>(() => new RpcGamerReport());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcGamerReport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcGamerReport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcGamerReport(RpcGamerReport other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    bid_ = other.bid_;
    uuid_ = other.uuid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcGamerReport Clone() {
    return new RpcGamerReport(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///举报者Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "bid" field.</summary>
  public const int BidFieldNumber = 2;
  private readonly static long BidDefaultValue = 0L;

  private long bid_;
  /// <summary>
  ///被举报者id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Bid {
    get { if ((_hasBits0 & 2) != 0) { return bid_; } else { return BidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      bid_ = value;
    }
  }
  /// <summary>Gets whether the "bid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "bid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "uuid" field.</summary>
  public const int UuidFieldNumber = 3;
  private readonly static long UuidDefaultValue = 0L;

  private long uuid_;
  /// <summary>
  ///比赛id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Uuid {
    get { if ((_hasBits0 & 4) != 0) { return uuid_; } else { return UuidDefaultValue; } }
    set {
      _hasBits0 |= 4;
      uuid_ = value;
    }
  }
  /// <summary>Gets whether the "uuid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUuid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "uuid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUuid() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcGamerReport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcGamerReport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Bid != other.Bid) return false;
    if (Uuid != other.Uuid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasBid) hash ^= Bid.GetHashCode();
    if (HasUuid) hash ^= Uuid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasBid) {
      output.WriteRawTag(16);
      output.WriteInt64(Bid);
    }
    if (HasUuid) {
      output.WriteRawTag(24);
      output.WriteInt64(Uuid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasBid) {
      output.WriteRawTag(16);
      output.WriteInt64(Bid);
    }
    if (HasUuid) {
      output.WriteRawTag(24);
      output.WriteInt64(Uuid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasBid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bid);
    }
    if (HasUuid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcGamerReport other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasBid) {
      Bid = other.Bid;
    }
    if (other.HasUuid) {
      Uuid = other.Uuid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Bid = input.ReadInt64();
          break;
        }
        case 24: {
          Uuid = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Bid = input.ReadInt64();
          break;
        }
        case 24: {
          Uuid = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcKickFightAttacked : pb::IMessage<RpcKickFightAttacked>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcKickFightAttacked> _parser = new pb::MessageParser<RpcKickFightAttacked>(() => new RpcKickFightAttacked());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcKickFightAttacked> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcKickFightAttacked() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcKickFightAttacked(RpcKickFightAttacked other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    score_ = other.score_;
    rank_ = other.rank_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcKickFightAttacked Clone() {
    return new RpcKickFightAttacked(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///被挑战的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 2;
  private readonly static int ScoreDefaultValue = 0;

  private int score_;
  /// <summary>
  ///被挑战后的分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
    set {
      _hasBits0 |= 2;
      score_ = value;
    }
  }
  /// <summary>Gets whether the "score" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScore {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "score" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScore() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 3;
  private readonly static int RankDefaultValue = 0;

  private int rank_;
  /// <summary>
  ///被挑战后的排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { if ((_hasBits0 & 4) != 0) { return rank_; } else { return RankDefaultValue; } }
    set {
      _hasBits0 |= 4;
      rank_ = value;
    }
  }
  /// <summary>Gets whether the "rank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRank {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "rank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRank() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcKickFightAttacked);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcKickFightAttacked other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Score != other.Score) return false;
    if (Rank != other.Rank) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasScore) hash ^= Score.GetHashCode();
    if (HasRank) hash ^= Rank.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasScore) {
      output.WriteRawTag(16);
      output.WriteInt32(Score);
    }
    if (HasRank) {
      output.WriteRawTag(24);
      output.WriteInt32(Rank);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasScore) {
      output.WriteRawTag(16);
      output.WriteInt32(Score);
    }
    if (HasRank) {
      output.WriteRawTag(24);
      output.WriteInt32(Rank);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasScore) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (HasRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcKickFightAttacked other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasScore) {
      Score = other.Score;
    }
    if (other.HasRank) {
      Rank = other.Rank;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Score = input.ReadInt32();
          break;
        }
        case 24: {
          Rank = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Score = input.ReadInt32();
          break;
        }
        case 24: {
          Rank = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Payment : pb::IMessage<Payment>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Payment> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Payment() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Payment(Payment other) : this() {
    _hasBits0 = other._hasBits0;
    account_ = other.account_;
    gid_ = other.gid_;
    zone_ = other.zone_;
    orderId_ = other.orderId_;
    payId_ = other.payId_;
    amount_ = other.amount_;
    isBlack_ = other.isBlack_;
    orderType_ = other.orderType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Payment Clone() {
    return new Payment(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private readonly static string AccountDefaultValue = "";

  private string account_;
  /// <summary>
  ///账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_ ?? AccountDefaultValue; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "account" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccount {
    get { return account_ != null; }
  }
  /// <summary>Clears the value of the "account" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccount() {
    account_ = null;
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 2;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "zone" field.</summary>
  public const int ZoneFieldNumber = 3;
  private readonly static int ZoneDefaultValue = 0;

  private int zone_;
  /// <summary>
  ///玩家区服
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Zone {
    get { if ((_hasBits0 & 2) != 0) { return zone_; } else { return ZoneDefaultValue; } }
    set {
      _hasBits0 |= 2;
      zone_ = value;
    }
  }
  /// <summary>Gets whether the "zone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasZone {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "zone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearZone() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "order_id" field.</summary>
  public const int OrderIdFieldNumber = 4;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  ///订单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OrderId {
    get { if ((_hasBits0 & 4) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "order_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "order_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "pay_id" field.</summary>
  public const int PayIdFieldNumber = 5;
  private readonly static int PayIdDefaultValue = 0;

  private int payId_;
  /// <summary>
  ///商品ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PayId {
    get { if ((_hasBits0 & 8) != 0) { return payId_; } else { return PayIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      payId_ = value;
    }
  }
  /// <summary>Gets whether the "pay_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "pay_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 6;
  private readonly static string AmountDefaultValue = "";

  private string amount_;
  /// <summary>
  ///充值金额
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Amount {
    get { return amount_ ?? AmountDefaultValue; }
    set {
      amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "amount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAmount {
    get { return amount_ != null; }
  }
  /// <summary>Clears the value of the "amount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAmount() {
    amount_ = null;
  }

  /// <summary>Field number for the "is_black" field.</summary>
  public const int IsBlackFieldNumber = 7;
  private readonly static int IsBlackDefaultValue = 0;

  private int isBlack_;
  /// <summary>
  ///黑订单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsBlack {
    get { if ((_hasBits0 & 16) != 0) { return isBlack_; } else { return IsBlackDefaultValue; } }
    set {
      _hasBits0 |= 16;
      isBlack_ = value;
    }
  }
  /// <summary>Gets whether the "is_black" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsBlack {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "is_black" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsBlack() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "order_type" field.</summary>
  public const int OrderTypeFieldNumber = 8;
  private readonly static int OrderTypeDefaultValue = 0;

  private int orderType_;
  /// <summary>
  ///订单类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OrderType {
    get { if ((_hasBits0 & 32) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      orderType_ = value;
    }
  }
  /// <summary>Gets whether the "order_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderType {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "order_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderType() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Payment);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Payment other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (Gid != other.Gid) return false;
    if (Zone != other.Zone) return false;
    if (OrderId != other.OrderId) return false;
    if (PayId != other.PayId) return false;
    if (Amount != other.Amount) return false;
    if (IsBlack != other.IsBlack) return false;
    if (OrderType != other.OrderType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccount) hash ^= Account.GetHashCode();
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasZone) hash ^= Zone.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasPayId) hash ^= PayId.GetHashCode();
    if (HasAmount) hash ^= Amount.GetHashCode();
    if (HasIsBlack) hash ^= IsBlack.GetHashCode();
    if (HasOrderType) hash ^= OrderType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAccount) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
    if (HasGid) {
      output.WriteRawTag(16);
      output.WriteInt64(Gid);
    }
    if (HasZone) {
      output.WriteRawTag(24);
      output.WriteInt32(Zone);
    }
    if (HasOrderId) {
      output.WriteRawTag(32);
      output.WriteInt64(OrderId);
    }
    if (HasPayId) {
      output.WriteRawTag(40);
      output.WriteInt32(PayId);
    }
    if (HasAmount) {
      output.WriteRawTag(50);
      output.WriteString(Amount);
    }
    if (HasIsBlack) {
      output.WriteRawTag(56);
      output.WriteInt32(IsBlack);
    }
    if (HasOrderType) {
      output.WriteRawTag(64);
      output.WriteInt32(OrderType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAccount) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
    if (HasGid) {
      output.WriteRawTag(16);
      output.WriteInt64(Gid);
    }
    if (HasZone) {
      output.WriteRawTag(24);
      output.WriteInt32(Zone);
    }
    if (HasOrderId) {
      output.WriteRawTag(32);
      output.WriteInt64(OrderId);
    }
    if (HasPayId) {
      output.WriteRawTag(40);
      output.WriteInt32(PayId);
    }
    if (HasAmount) {
      output.WriteRawTag(50);
      output.WriteString(Amount);
    }
    if (HasIsBlack) {
      output.WriteRawTag(56);
      output.WriteInt32(IsBlack);
    }
    if (HasOrderType) {
      output.WriteRawTag(64);
      output.WriteInt32(OrderType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccount) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasZone) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Zone);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasPayId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayId);
    }
    if (HasAmount) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
    }
    if (HasIsBlack) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBlack);
    }
    if (HasOrderType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Payment other) {
    if (other == null) {
      return;
    }
    if (other.HasAccount) {
      Account = other.Account;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasZone) {
      Zone = other.Zone;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasPayId) {
      PayId = other.PayId;
    }
    if (other.HasAmount) {
      Amount = other.Amount;
    }
    if (other.HasIsBlack) {
      IsBlack = other.IsBlack;
    }
    if (other.HasOrderType) {
      OrderType = other.OrderType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
        case 16: {
          Gid = input.ReadInt64();
          break;
        }
        case 24: {
          Zone = input.ReadInt32();
          break;
        }
        case 32: {
          OrderId = input.ReadInt64();
          break;
        }
        case 40: {
          PayId = input.ReadInt32();
          break;
        }
        case 50: {
          Amount = input.ReadString();
          break;
        }
        case 56: {
          IsBlack = input.ReadInt32();
          break;
        }
        case 64: {
          OrderType = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
        case 16: {
          Gid = input.ReadInt64();
          break;
        }
        case 24: {
          Zone = input.ReadInt32();
          break;
        }
        case 32: {
          OrderId = input.ReadInt64();
          break;
        }
        case 40: {
          PayId = input.ReadInt32();
          break;
        }
        case 50: {
          Amount = input.ReadString();
          break;
        }
        case 56: {
          IsBlack = input.ReadInt32();
          break;
        }
        case 64: {
          OrderType = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcInviteCodeVerify : pb::IMessage<RpcInviteCodeVerify>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcInviteCodeVerify> _parser = new pb::MessageParser<RpcInviteCodeVerify>(() => new RpcInviteCodeVerify());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcInviteCodeVerify> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcInviteCodeVerify() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcInviteCodeVerify(RpcInviteCodeVerify other) : this() {
    _hasBits0 = other._hasBits0;
    inviterGid_ = other.inviterGid_;
    inviteCode_ = other.inviteCode_;
    verifyId_ = other.verifyId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcInviteCodeVerify Clone() {
    return new RpcInviteCodeVerify(this);
  }

  /// <summary>Field number for the "inviterGid" field.</summary>
  public const int InviterGidFieldNumber = 1;
  private readonly static long InviterGidDefaultValue = 0L;

  private long inviterGid_;
  /// <summary>
  ///邀请者gid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long InviterGid {
    get { if ((_hasBits0 & 1) != 0) { return inviterGid_; } else { return InviterGidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      inviterGid_ = value;
    }
  }
  /// <summary>Gets whether the "inviterGid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInviterGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "inviterGid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInviterGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "inviteCode" field.</summary>
  public const int InviteCodeFieldNumber = 2;
  private readonly static string InviteCodeDefaultValue = "";

  private string inviteCode_;
  /// <summary>
  ///邀请码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string InviteCode {
    get { return inviteCode_ ?? InviteCodeDefaultValue; }
    set {
      inviteCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "inviteCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInviteCode {
    get { return inviteCode_ != null; }
  }
  /// <summary>Clears the value of the "inviteCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInviteCode() {
    inviteCode_ = null;
  }

  /// <summary>Field number for the "verifyId" field.</summary>
  public const int VerifyIdFieldNumber = 3;
  private readonly static long VerifyIdDefaultValue = 0L;

  private long verifyId_;
  /// <summary>
  ///验证者gid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VerifyId {
    get { if ((_hasBits0 & 2) != 0) { return verifyId_; } else { return VerifyIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      verifyId_ = value;
    }
  }
  /// <summary>Gets whether the "verifyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVerifyId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "verifyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVerifyId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcInviteCodeVerify);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcInviteCodeVerify other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InviterGid != other.InviterGid) return false;
    if (InviteCode != other.InviteCode) return false;
    if (VerifyId != other.VerifyId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInviterGid) hash ^= InviterGid.GetHashCode();
    if (HasInviteCode) hash ^= InviteCode.GetHashCode();
    if (HasVerifyId) hash ^= VerifyId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasInviterGid) {
      output.WriteRawTag(8);
      output.WriteInt64(InviterGid);
    }
    if (HasInviteCode) {
      output.WriteRawTag(18);
      output.WriteString(InviteCode);
    }
    if (HasVerifyId) {
      output.WriteRawTag(24);
      output.WriteInt64(VerifyId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasInviterGid) {
      output.WriteRawTag(8);
      output.WriteInt64(InviterGid);
    }
    if (HasInviteCode) {
      output.WriteRawTag(18);
      output.WriteString(InviteCode);
    }
    if (HasVerifyId) {
      output.WriteRawTag(24);
      output.WriteInt64(VerifyId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInviterGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviterGid);
    }
    if (HasInviteCode) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteCode);
    }
    if (HasVerifyId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VerifyId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcInviteCodeVerify other) {
    if (other == null) {
      return;
    }
    if (other.HasInviterGid) {
      InviterGid = other.InviterGid;
    }
    if (other.HasInviteCode) {
      InviteCode = other.InviteCode;
    }
    if (other.HasVerifyId) {
      VerifyId = other.VerifyId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InviterGid = input.ReadInt64();
          break;
        }
        case 18: {
          InviteCode = input.ReadString();
          break;
        }
        case 24: {
          VerifyId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          InviterGid = input.ReadInt64();
          break;
        }
        case 18: {
          InviteCode = input.ReadString();
          break;
        }
        case 24: {
          VerifyId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcInviteCodeVerifyResult : pb::IMessage<RpcInviteCodeVerifyResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcInviteCodeVerifyResult> _parser = new pb::MessageParser<RpcInviteCodeVerifyResult>(() => new RpcInviteCodeVerifyResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcInviteCodeVerifyResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcInviteCodeVerifyResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcInviteCodeVerifyResult(RpcInviteCodeVerifyResult other) : this() {
    _hasBits0 = other._hasBits0;
    inviterGid_ = other.inviterGid_;
    verifyId_ = other.verifyId_;
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcInviteCodeVerifyResult Clone() {
    return new RpcInviteCodeVerifyResult(this);
  }

  /// <summary>Field number for the "inviterGid" field.</summary>
  public const int InviterGidFieldNumber = 1;
  private readonly static long InviterGidDefaultValue = 0L;

  private long inviterGid_;
  /// <summary>
  ///邀请者gid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long InviterGid {
    get { if ((_hasBits0 & 1) != 0) { return inviterGid_; } else { return InviterGidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      inviterGid_ = value;
    }
  }
  /// <summary>Gets whether the "inviterGid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInviterGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "inviterGid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInviterGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "verifyId" field.</summary>
  public const int VerifyIdFieldNumber = 2;
  private readonly static long VerifyIdDefaultValue = 0L;

  private long verifyId_;
  /// <summary>
  ///验证者gid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VerifyId {
    get { if ((_hasBits0 & 2) != 0) { return verifyId_; } else { return VerifyIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      verifyId_ = value;
    }
  }
  /// <summary>Gets whether the "verifyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVerifyId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "verifyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVerifyId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private readonly static int ResultDefaultValue = 0;

  private int result_;
  /// <summary>
  ///结果（0验证成功 1账号已经验证过 2输入自己的验证码 3验证码有误 4邀请方达到人数上限）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { if ((_hasBits0 & 4) != 0) { return result_; } else { return ResultDefaultValue; } }
    set {
      _hasBits0 |= 4;
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResult {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResult() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcInviteCodeVerifyResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcInviteCodeVerifyResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InviterGid != other.InviterGid) return false;
    if (VerifyId != other.VerifyId) return false;
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInviterGid) hash ^= InviterGid.GetHashCode();
    if (HasVerifyId) hash ^= VerifyId.GetHashCode();
    if (HasResult) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasInviterGid) {
      output.WriteRawTag(8);
      output.WriteInt64(InviterGid);
    }
    if (HasVerifyId) {
      output.WriteRawTag(16);
      output.WriteInt64(VerifyId);
    }
    if (HasResult) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasInviterGid) {
      output.WriteRawTag(8);
      output.WriteInt64(InviterGid);
    }
    if (HasVerifyId) {
      output.WriteRawTag(16);
      output.WriteInt64(VerifyId);
    }
    if (HasResult) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInviterGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviterGid);
    }
    if (HasVerifyId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VerifyId);
    }
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcInviteCodeVerifyResult other) {
    if (other == null) {
      return;
    }
    if (other.HasInviterGid) {
      InviterGid = other.InviterGid;
    }
    if (other.HasVerifyId) {
      VerifyId = other.VerifyId;
    }
    if (other.HasResult) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InviterGid = input.ReadInt64();
          break;
        }
        case 16: {
          VerifyId = input.ReadInt64();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          InviterGid = input.ReadInt64();
          break;
        }
        case 16: {
          VerifyId = input.ReadInt64();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RpcAddInviterScore : pb::IMessage<RpcAddInviterScore>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcAddInviterScore> _parser = new pb::MessageParser<RpcAddInviterScore>(() => new RpcAddInviterScore());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcAddInviterScore> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcAddInviterScore() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcAddInviterScore(RpcAddInviterScore other) : this() {
    _hasBits0 = other._hasBits0;
    inviterGid_ = other.inviterGid_;
    addScore_ = other.addScore_;
    contributeGid_ = other.contributeGid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcAddInviterScore Clone() {
    return new RpcAddInviterScore(this);
  }

  /// <summary>Field number for the "inviterGid" field.</summary>
  public const int InviterGidFieldNumber = 1;
  private readonly static long InviterGidDefaultValue = 0L;

  private long inviterGid_;
  /// <summary>
  ///邀请者gid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long InviterGid {
    get { if ((_hasBits0 & 1) != 0) { return inviterGid_; } else { return InviterGidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      inviterGid_ = value;
    }
  }
  /// <summary>Gets whether the "inviterGid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInviterGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "inviterGid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInviterGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "addScore" field.</summary>
  public const int AddScoreFieldNumber = 2;
  private readonly static int AddScoreDefaultValue = 0;

  private int addScore_;
  /// <summary>
  ///增加积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AddScore {
    get { if ((_hasBits0 & 2) != 0) { return addScore_; } else { return AddScoreDefaultValue; } }
    set {
      _hasBits0 |= 2;
      addScore_ = value;
    }
  }
  /// <summary>Gets whether the "addScore" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAddScore {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "addScore" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAddScore() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "contributeGid" field.</summary>
  public const int ContributeGidFieldNumber = 3;
  private readonly static long ContributeGidDefaultValue = 0L;

  private long contributeGid_;
  /// <summary>
  ///贡献者gid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ContributeGid {
    get { if ((_hasBits0 & 4) != 0) { return contributeGid_; } else { return ContributeGidDefaultValue; } }
    set {
      _hasBits0 |= 4;
      contributeGid_ = value;
    }
  }
  /// <summary>Gets whether the "contributeGid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContributeGid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "contributeGid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContributeGid() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcAddInviterScore);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcAddInviterScore other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InviterGid != other.InviterGid) return false;
    if (AddScore != other.AddScore) return false;
    if (ContributeGid != other.ContributeGid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInviterGid) hash ^= InviterGid.GetHashCode();
    if (HasAddScore) hash ^= AddScore.GetHashCode();
    if (HasContributeGid) hash ^= ContributeGid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasInviterGid) {
      output.WriteRawTag(8);
      output.WriteInt64(InviterGid);
    }
    if (HasAddScore) {
      output.WriteRawTag(16);
      output.WriteInt32(AddScore);
    }
    if (HasContributeGid) {
      output.WriteRawTag(24);
      output.WriteInt64(ContributeGid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasInviterGid) {
      output.WriteRawTag(8);
      output.WriteInt64(InviterGid);
    }
    if (HasAddScore) {
      output.WriteRawTag(16);
      output.WriteInt32(AddScore);
    }
    if (HasContributeGid) {
      output.WriteRawTag(24);
      output.WriteInt64(ContributeGid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasInviterGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviterGid);
    }
    if (HasAddScore) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddScore);
    }
    if (HasContributeGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ContributeGid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcAddInviterScore other) {
    if (other == null) {
      return;
    }
    if (other.HasInviterGid) {
      InviterGid = other.InviterGid;
    }
    if (other.HasAddScore) {
      AddScore = other.AddScore;
    }
    if (other.HasContributeGid) {
      ContributeGid = other.ContributeGid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InviterGid = input.ReadInt64();
          break;
        }
        case 16: {
          AddScore = input.ReadInt32();
          break;
        }
        case 24: {
          ContributeGid = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          InviterGid = input.ReadInt64();
          break;
        }
        case 16: {
          AddScore = input.ReadInt32();
          break;
        }
        case 24: {
          ContributeGid = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///    optional FriendGiftUtil gift = 1; //礼物数据
/// </summary>
public sealed partial class RpcReceiveFriendGift : pb::IMessage<RpcReceiveFriendGift>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcReceiveFriendGift> _parser = new pb::MessageParser<RpcReceiveFriendGift>(() => new RpcReceiveFriendGift());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcReceiveFriendGift> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcReceiveFriendGift() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcReceiveFriendGift(RpcReceiveFriendGift other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcReceiveFriendGift Clone() {
    return new RpcReceiveFriendGift(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcReceiveFriendGift);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcReceiveFriendGift other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcReceiveFriendGift other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

/// <summary>
///增加好感度
/// </summary>
public sealed partial class RpcAddFavour : pb::IMessage<RpcAddFavour>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcAddFavour> _parser = new pb::MessageParser<RpcAddFavour>(() => new RpcAddFavour());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcAddFavour> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcAddFavour() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcAddFavour(RpcAddFavour other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    fid_ = other.fid_;
    favour_ = other.favour_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcAddFavour Clone() {
    return new RpcAddFavour(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fid" field.</summary>
  public const int FidFieldNumber = 2;
  private readonly static long FidDefaultValue = 0L;

  private long fid_;
  /// <summary>
  ///好友id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Fid {
    get { if ((_hasBits0 & 2) != 0) { return fid_; } else { return FidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fid_ = value;
    }
  }
  /// <summary>Gets whether the "fid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "favour" field.</summary>
  public const int FavourFieldNumber = 3;
  private readonly static int FavourDefaultValue = 0;

  private int favour_;
  /// <summary>
  ///好感度增加值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Favour {
    get { if ((_hasBits0 & 4) != 0) { return favour_; } else { return FavourDefaultValue; } }
    set {
      _hasBits0 |= 4;
      favour_ = value;
    }
  }
  /// <summary>Gets whether the "favour" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFavour {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "favour" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFavour() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcAddFavour);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcAddFavour other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Fid != other.Fid) return false;
    if (Favour != other.Favour) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasFid) hash ^= Fid.GetHashCode();
    if (HasFavour) hash ^= Favour.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (HasFavour) {
      output.WriteRawTag(24);
      output.WriteInt32(Favour);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (HasFavour) {
      output.WriteRawTag(24);
      output.WriteInt32(Favour);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasFid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fid);
    }
    if (HasFavour) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Favour);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcAddFavour other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasFid) {
      Fid = other.Fid;
    }
    if (other.HasFavour) {
      Favour = other.Favour;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
        case 24: {
          Favour = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
        case 24: {
          Favour = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///好友助力
/// </summary>
public sealed partial class RpcSpringWishHelp : pb::IMessage<RpcSpringWishHelp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcSpringWishHelp> _parser = new pb::MessageParser<RpcSpringWishHelp>(() => new RpcSpringWishHelp());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcSpringWishHelp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcSpringWishHelp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcSpringWishHelp(RpcSpringWishHelp other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    fid_ = other.fid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcSpringWishHelp Clone() {
    return new RpcSpringWishHelp(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fid" field.</summary>
  public const int FidFieldNumber = 2;
  private readonly static long FidDefaultValue = 0L;

  private long fid_;
  /// <summary>
  ///好友id(被助力玩家)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Fid {
    get { if ((_hasBits0 & 2) != 0) { return fid_; } else { return FidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fid_ = value;
    }
  }
  /// <summary>Gets whether the "fid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFid() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcSpringWishHelp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcSpringWishHelp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Fid != other.Fid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasFid) hash ^= Fid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasFid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcSpringWishHelp other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasFid) {
      Fid = other.Fid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///好友助力结果
/// </summary>
public sealed partial class RpcSpringWishHelpResult : pb::IMessage<RpcSpringWishHelpResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RpcSpringWishHelpResult> _parser = new pb::MessageParser<RpcSpringWishHelpResult>(() => new RpcSpringWishHelpResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RpcSpringWishHelpResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcSpringWishHelpResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcSpringWishHelpResult(RpcSpringWishHelpResult other) : this() {
    _hasBits0 = other._hasBits0;
    gid_ = other.gid_;
    fid_ = other.fid_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RpcSpringWishHelpResult Clone() {
    return new RpcSpringWishHelpResult(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private readonly static long GidDefaultValue = 0L;

  private long gid_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gid {
    get { if ((_hasBits0 & 1) != 0) { return gid_; } else { return GidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gid_ = value;
    }
  }
  /// <summary>Gets whether the "gid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fid" field.</summary>
  public const int FidFieldNumber = 2;
  private readonly static long FidDefaultValue = 0L;

  private long fid_;
  /// <summary>
  ///好友id(被助力玩家)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Fid {
    get { if ((_hasBits0 & 2) != 0) { return fid_; } else { return FidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fid_ = value;
    }
  }
  /// <summary>Gets whether the "fid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  ///操作结果（0成功 1功能未开放 2非好友不可助力 3好友未许愿 4好友许愿已完成 5好友被助力次数达到上限 6今日已帮助过好友）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { if ((_hasBits0 & 4) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RpcSpringWishHelpResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RpcSpringWishHelpResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (Fid != other.Fid) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGid) hash ^= Gid.GetHashCode();
    if (HasFid) hash ^= Fid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGid) {
      output.WriteRawTag(8);
      output.WriteInt64(Gid);
    }
    if (HasFid) {
      output.WriteRawTag(16);
      output.WriteInt64(Fid);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasGid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gid);
    }
    if (HasFid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RpcSpringWishHelpResult other) {
    if (other == null) {
      return;
    }
    if (other.HasGid) {
      Gid = other.Gid;
    }
    if (other.HasFid) {
      Fid = other.Fid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gid = input.ReadInt64();
          break;
        }
        case 16: {
          Fid = input.ReadInt64();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
